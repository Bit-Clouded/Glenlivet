AWSTemplateFormatVersion: 2010-09-09
Description: A template for a shared load balancers.
Metadata:
  DefaultName: SharedLoadBalancer
  Dependencies:
    - TemplatePath: networking/vpc
      Resources:
        ElbSg: ElbSecGroup
        HttpSg: HttpNsSecGroup
    - TemplatePath: networking/elb-subnets
      Parameters:
        VpcId: VpcId
      Outputs:
        ElbSubnets: ElbSubnets
      NestedDependency: networking/vpc
    - TemplatePath: analytics/logs-store
      Resources:
        LogBucket: Raw
    - TemplatePath: security/waf
      Resources:
        RegionalWebAcl: RegionalDefaultWebAcl
        RegionalXssRule: RegionalXssRule
        RegionalSqlInjectionRule: RegionalSqlInjectionRule
Parameters:
  ElbSubnets:
    Description: 'VPCid associated with the subnets. [elb-subnets.outputs.ElbSubnets]'
    Type: 'List<AWS::EC2::Subnet::Id>'
  ElbSg:
    Description: 'Elb Security Group'
    Type: String
  HttpSg:
    Description: 'Elb Targets Security Group'
    Type: String
  CertificateArn:
    Description: 'Certificate to associate with HTTPS listener'
    Type: String
    Default: ''
  VpcId:
    Description: ''
    Type: String
  LogBucket:
    Description: ''
    Type: String
  RegionalWebAcl:
    Description: 'A shared AWS Web ACL external to the template to be attached to the load balancer'
    Type: String
  RegionalXssRule:
    Description: 'A shared AWS regional xss rule external to the template. Use in case RegionalWebAcl is not filled in'
    Type: String
  RegionalSqlInjectionRule:
    Description: 'A shared AWS regional xss rule external to the template. Use in case RegionalWebAcl is not filled in'
    Type: String

  # SSL Redirect
  GatewayScheme:
    Description: ''
    Type: String
    Default: 'internal'
    AllowedValues:
      - internal
      - internet-facing
  IdleTimeout:
    Description: 'Idle timeout attribute setting for the load balancer'
    Type: Number
    MinValue: 1
    MaxValue: 4000
    Default: 60
    
Conditions:
  HasCertificateArn: !Not [!Equals [!Ref CertificateArn, '']]

Resources:
  HttpGateway:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: !Ref GatewayScheme
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: !Ref IdleTimeout
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket
          Value: !Ref LogBucket
      Subnets: !Ref ElbSubnets
      SecurityGroups:
        - !Ref ElbSg
        - !Ref HttpSg
  GatewayWafAssociation:
    Type: "AWS::WAFRegional::WebACLAssociation"
    Properties: 
      ResourceArn: !Ref HttpGateway
      WebACLId: !Ref RegionalWebAcl
  HttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref HttpGateway
      Port: '80'
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Protocol: HTTPS
            StatusCode: HTTP_302
      Protocol: HTTP
  HttpsListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: HasCertificateArn
    Properties:
      LoadBalancerArn: !Ref HttpGateway
      Port: '443'
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 505
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn

Outputs:
  GatewayName:
    Value: !GetAtt HttpGateway.LoadBalancerFullName
  GatewayDnsName:
    Value: !GetAtt HttpGateway.DNSName
  GatewayCanonicalZonId:
    Value: !GetAtt HttpGateway.CanonicalHostedZoneID
