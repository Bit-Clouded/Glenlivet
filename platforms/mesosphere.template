{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "VpcId": {
        "Description" : "VPCid associated with the subnets. [elb-subnets.parameters.VpcId]",
        "Type": "AWS::EC2::VPC::Id"
    },

    "ServerSubnet1Id": {
        "Description" : "Subnet to run HA web cluster on. [elb-subnets.resources.PvtWebSubnet1]",
        "Type": "AWS::EC2::Subnet::Id"
    },
    "ServerSubnet2Id": {
        "Description" : "Subnet to run HA web cluster on. [elb-subnets.resources.PvtWebSubnet2]",
        "Type": "AWS::EC2::Subnet::Id"
    },
    "ServerSubnet3Id": {
        "Description" : "Subnet to run HA web cluster on. [elb-subnets.resources.PvtWebSubnet3]",
        "Type": "String",
        "Default": ""
    },

    "ElbSubnet1Id": {
        "Description" : "Subnet to run HA web cluster on. [elb-subnets.resources.ElbSubnet1]",
        "Type": "AWS::EC2::Subnet::Id"
    },
    "ElbSubnet2Id": {
        "Description" : "Subnet to run HA web cluster on. [elb-subnets.resources.ElbSubnet2]",
        "Type": "AWS::EC2::Subnet::Id"
    },
    "ElbSubnet3Id": {
        "Description" : "Subnet to run HA web cluster on. [elb-subnets.resources.ElbSubnet3]",
        "Type": "String",
        "Default": ""
    },
    "SlaveInstanceCount": {
      "Description": "Required: Specify the number of private agent nodes or accept the default.",
      "Default": "2",
      "Type": "Number"
    },
    "KeyName": {
      "Description": "Required: Specify your AWS EC2 Key Pair.",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "CoreOsAmi" : {
      "Description": "AMI Id for CoreOS",
      "Type": "AWS::EC2::Image::Id"
    },
    "OAuthEnabled": {
      "Description": "Enable OAuth authentication",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Type": "String"
    },
    "PublicSlaveInstanceCount": {
      "Description": "Required: Specify the number of public agent nodes or accept the default.",
      "Default": "1",
      "Type": "Number"
    },
    "AdminLocation": {
      "ConstraintDescription": "must be a valid CIDR.",
      "Description": "Optional: Specify the IP range to whitelist for access to the admin zone. Must be a valid CIDR.",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
      "Default": "0.0.0.0/0",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18"
    }
  },
  "Mappings": {
    "Parameters": {
      "PublicSlaveInstanceType": {
        "default": "m4.large"
      },
      "MasterInstanceType": {
        "default": "m4.large"
      },
      "SlaveInstanceType": {
        "default": "m4.large"
      },
      "StackCreationTimeout": {
        "default": "PT45M"
      }
    }
  },
  "Description": "DC/OS AWS CloudFormation Template",
  "Resources": {
    "AdminSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "AdminLocation"
            },
            "IpProtocol": "tcp"
          },
          {
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "AdminLocation"
            },
            "IpProtocol": "tcp"
          },
          {
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Ref": "AdminLocation"
            },
            "IpProtocol": "tcp"
          }
        ],
        "GroupDescription": "Enable admin access to servers"
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "LbSecurityGroup"
          },
          {
            "Ref": "AdminSecurityGroup"
          }
        ],
        "HealthCheck": {
          "Interval": "30",
          "Target": "TCP:5050",
          "Timeout": "5",
          "UnhealthyThreshold": "2",
          "HealthyThreshold": "2"
        },
        "Listeners": [
          {
            "Protocol": "TCP",
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "InstanceProtocol": "TCP"
          },
          {
            "Protocol": "TCP",
            "LoadBalancerPort": "443",
            "InstancePort": "443",
            "InstanceProtocol": "TCP"
          }
        ],
        "Subnets": [
          { "Ref": "ElbSubnet1Id" },
          { "Ref": "ElbSubnet2Id" }
        ]
      }
    },
    "ExhibitorS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain"
    },
    "InternalMasterLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "LbSecurityGroup"
          },
          {
            "Ref": "AdminSecurityGroup"
          },
          {
            "Ref": "SlaveSecurityGroup"
          },
          {
            "Ref": "PublicSlaveSecurityGroup"
          },
          {
            "Ref": "MasterSecurityGroup"
          }
        ],
        "HealthCheck": {
          "Interval": "30",
          "Target": "TCP:5050",
          "Timeout": "5",
          "UnhealthyThreshold": "2",
          "HealthyThreshold": "2"
        },
        "Scheme": "internal",
        "Listeners": [
          {
            "Protocol": "HTTP",
            "LoadBalancerPort": "5050",
            "InstancePort": "5050",
            "InstanceProtocol": "HTTP"
          },
          {
            "Protocol": "TCP",
            "LoadBalancerPort": "2181",
            "InstancePort": "2181",
            "InstanceProtocol": "TCP"
          },
          {
            "Protocol": "HTTP",
            "LoadBalancerPort": "8181",
            "InstancePort": "8181",
            "InstanceProtocol": "HTTP"
          },
          {
            "Protocol": "TCP",
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "InstanceProtocol": "TCP"
          },
          {
            "Protocol": "TCP",
            "LoadBalancerPort": "443",
            "InstancePort": "443",
            "InstanceProtocol": "TCP"
          },
          {
            "Protocol": "HTTP",
            "LoadBalancerPort": "8080",
            "InstancePort": "8080",
            "InstanceProtocol": "HTTP"
          }
        ],
        "Subnets": [
          { "Ref": "ElbSubnet1Id" },
          { "Ref": "ElbSubnet2Id" }
        ]
      }
    },
    "LbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VpcId"
        },
        "GroupDescription": "Mesos Master LB"
      }
    },
    "MasterInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "MasterRole"
          }
        ],
        "Path": "/platforms/mesosphere/"
      }
    },
    "MasterLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "MasterSecurityGroup"
          },
          {
            "Ref": "AdminSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdb",
            "VirtualName": "ephemeral0"
          }
        ],
        "ImageId" : { "Ref" : "CoreOsAmi" },
        "InstanceType": {
          "Fn::FindInMap": [
            "Parameters",
            "MasterInstanceType",
            "default"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\"coreos\":\n",
                "  \"units\":\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n",
                "      Before=var-lib.mount dbus.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      RemainAfterExit=yes\n",
                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                "    \"name\": |-\n",
                "      format-var-lib-ephemeral.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Mount /var/lib\n",
                "      Before=dbus.service\n",
                "      [Mount]\n",
                "      What=/dev/xvdb\n",
                "      Where=/var/lib\n",
                "      Type=ext4\n",
                "    \"name\": |-\n",
                "      var-lib.mount\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      etcd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      update-engine.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      locksmithd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"name\": |-\n",
                "      systemd-resolved.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      systemd-journald.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      docker.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Before=dcos.target\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                "    \"name\": |-\n",
                "      dcos-link-env.service\n",
                "  - \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Download DC/OS to this host.\n",
                "      After=network-online.target\n",
                "      Wants=network-online.target\n",
                "      ConditionPathExists=!/opt/mesosphere/\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/stable/bootstrap/995fa9bd946020901e2e57d8cefe89925fc90a71.bootstrap.tar.xz\n",
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                "    \"name\": |-\n",
                "      dcos-download.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Specialize DC/OS for this host.\n",
                "      Requires=dcos-download.service\n",
                "      After=dcos-download.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                "      [Install]\n",
                "      WantedBy=multi-user.target\n",
                "    \"enable\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      dcos-setup.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |-\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Signal CloudFormation Success\n",
                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                "      [Service]\n",
                "      Type=simple\n",
                "      Restart=on-failure\n",
                "      StartLimitInterval=0\n",
                "      RestartSec=15s\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=MasterServerGroup\"\n",
                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                "    \"name\": |-\n",
                "      dcos-cfn-signal.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  \"update\":\n",
                "    \"reboot-strategy\": |-\n",
                "      off\n",
                "\"write_files\":\n",
                "- \"content\": |\n",
                "    https://downloads.dcos.io/dcos/stable\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/repository-url\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [\"dcos-config--setup_81829809236553d9f9f32ea8e0877a12b42369c5\", \"dcos-metadata--setup_81829809236553d9f9f32ea8e0877a12b42369c5\"]\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [Journal]\n",
                "    MaxLevelConsole=warning\n",
                "    RateLimitInterval=1s\n",
                "    RateLimitBurst=20000\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/systemd/journald.conf.d/dcos.conf\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    rexray:\n",
                "      loglevel: info\n",
                "      modules:\n",
                "        default-admin:\n",
                "          host: tcp://127.0.0.1:61003\n",
                "      storageDrivers:\n",
                "      - ec2\n",
                "      volume:\n",
                "        unmount:\n",
                "          ignoreusedcount: true\n",
                "  \"path\": |-\n",
                "    /etc/rexray/config.yml\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    MESOS_CLUSTER=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                "- \"content\": |\n",
                "    ADMINROUTER_ACTIVATE_AUTH_MODULE=",
                {
                  "Ref": "OAuthEnabled"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n",
                "- \"content\": |\n",
                "    MASTER_SOURCE=exhibitor_uri\n",
                "    EXHIBITOR_URI=http://",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                ":8181/exhibitor/v1/cluster/status",
                "\n",
                "    EXHIBITOR_ADDRESS=",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    RESOLVERS=169.254.169.253\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                "- \"content\": |\n",
                "    EXHIBITOR_BACKEND=AWS_S3\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_S3_BUCKET=",
                {
                  "Ref": "ExhibitorS3Bucket"
                },
                "",
                "\n",
                "    AWS_S3_PREFIX=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                "- \"content\": |\n",
                "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n",
                "\n",
                "    \"authentication\":{\"enabled\":false},\n",
                "\n",
                "    \"oauth\":{\"enabled\":",
                {
                  "Ref": "OAuthEnabled"
                },
                ",\"authHost\":\"https://dcos.auth0.com\"},",
                "\n",
                "\n",
                "\n",
                "    \"tracking\":{\"enabled\":true}}}}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n",
                "- \"content\": |\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_STACK_ID=",
                {
                  "Ref": "AWS::StackId"
                },
                "",
                "\n",
                "    AWS_STACK_NAME=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "    AWS_IAM_MASTER_ROLE_NAME=",
                {
                  "Ref": "MasterRole"
                },
                "",
                "\n",
                "    AWS_IAM_SLAVE_ROLE_NAME=",
                {
                  "Ref": "SlaveRole"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
                "- \"content\": |\n",
                "    INTERNAL_MASTER_LB_DNSNAME=",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    MASTER_LB_DNSNAME=",
                {
                  "Fn::GetAtt": [
                    "ElasticLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/aws_dnsnames\n",
                "- \"content\": |-\n",
                "    {}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/master\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/aws_master\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/aws\n"
              ]
            ]
          }
        },
        "IamInstanceProfile": {
          "Ref": "MasterInstanceProfile"
        }
      }
    },
    "MasterRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/platforms/mesosphere/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "ExhibitorS3Bucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "ExhibitorS3Bucket"
                          }
                        ]
                      ]
                    }
                  ],
                  "Effect": "Allow",
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:DeleteObject",
                    "s3:GetBucketAcl",
                    "s3:GetBucketPolicy",
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:ListMultipartUploadParts",
                    "s3:PutObject",
                    "s3:PutObjectAcl"
                  ]
                },
                {
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::StackId"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ],
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:*"
                  ]
                },
                {
                  "Resource": "*",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeKeyPairs",
                    "ec2:DescribeSubnets",
                    "autoscaling:DescribeLaunchConfigurations",
                    "autoscaling:UpdateAutoScalingGroup",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeScalingActivities",
                    "elasticloadbalancing:DescribeLoadBalancers"
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "root"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "MasterSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "FromPort": "5050",
            "ToPort": "5050",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp"
          },
          {
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp"
          },
          {
            "FromPort": "443",
            "ToPort": "443",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp"
          },
          {
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp"
          },
          {
            "FromPort": "8181",
            "ToPort": "8181",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp"
          },
          {
            "FromPort": "2181",
            "ToPort": "2181",
            "SourceSecurityGroupId": {
              "Ref": "LbSecurityGroup"
            },
            "IpProtocol": "tcp"
          }
        ],
        "GroupDescription": "Mesos Masters"
      }
    },
    "MasterServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "DesiredCapacity": 3,
        "MaxSize": 3,
        "Tags": [
          {
            "PropagateAtLaunch": "true",
            "Key": "role",
            "Value": "mesos-master"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "MasterLaunchConfig"
        },
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          },
          {
            "Ref": "InternalMasterLoadBalancer"
          }
        ],
        "VPCZoneIdentifier": [
          { "Ref": "ServerSubnet1Id" },
          { "Ref": "ServerSubnet2Id" }
        ],
        "MinSize": 3
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {
            "Fn::FindInMap": [
              "Parameters",
              "StackCreationTimeout",
              "default"
            ]
          },
          "Count": 3
        }
      }
    },
    "MasterToMasterIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "IpProtocol": "-1",
        "ToPort": "65535"
      }
    },
    "MasterToPublicSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "IpProtocol": "-1",
        "ToPort": "65535"
      }
    },
    "MasterToSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "SourceSecurityGroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "IpProtocol": "-1",
        "ToPort": "65535"
      }
    },
    "PublicSlaveIngressFive": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "23",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "CidrIp": "0.0.0.0/0",
        "IpProtocol": "udp",
        "ToPort": "5050"
      }
    },
    "PublicSlaveIngressFour": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "CidrIp": "0.0.0.0/0",
        "IpProtocol": "udp",
        "ToPort": "21"
      }
    },
    "PublicSlaveIngressOne": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "CidrIp": "0.0.0.0/0",
        "IpProtocol": "tcp",
        "ToPort": "21"
      }
    },
    "PublicSlaveIngressSix": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "5052",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "CidrIp": "0.0.0.0/0",
        "IpProtocol": "udp",
        "ToPort": "32000"
      }
    },
    "PublicSlaveIngressThree": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "5052",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "CidrIp": "0.0.0.0/0",
        "IpProtocol": "tcp",
        "ToPort": "32000"
      }
    },
    "PublicSlaveIngressTwo": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "23",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "CidrIp": "0.0.0.0/0",
        "IpProtocol": "tcp",
        "ToPort": "5050"
      }
    },
    "PublicSlaveLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "PublicSlaveSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdb",
            "VirtualName": "ephemeral0"
          }
        ],
        "ImageId": { "Ref" : "CoreOsAmi" },
        "InstanceType": {
          "Fn::FindInMap": [
            "Parameters",
            "PublicSlaveInstanceType",
            "default"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\"coreos\":\n",
                "  \"units\":\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n",
                "      Before=var-lib.mount dbus.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      RemainAfterExit=yes\n",
                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                "    \"name\": |-\n",
                "      format-var-lib-ephemeral.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Mount /var/lib\n",
                "      Before=dbus.service\n",
                "      [Mount]\n",
                "      What=/dev/xvdb\n",
                "      Where=/var/lib\n",
                "      Type=ext4\n",
                "    \"name\": |-\n",
                "      var-lib.mount\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      etcd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      update-engine.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      locksmithd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"name\": |-\n",
                "      systemd-resolved.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      systemd-journald.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      docker.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Before=dcos.target\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                "    \"name\": |-\n",
                "      dcos-link-env.service\n",
                "  - \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Download DC/OS to this host.\n",
                "      After=network-online.target\n",
                "      Wants=network-online.target\n",
                "      ConditionPathExists=!/opt/mesosphere/\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/stable/bootstrap/995fa9bd946020901e2e57d8cefe89925fc90a71.bootstrap.tar.xz\n",
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                "    \"name\": |-\n",
                "      dcos-download.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Specialize DC/OS for this host.\n",
                "      Requires=dcos-download.service\n",
                "      After=dcos-download.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                "      [Install]\n",
                "      WantedBy=multi-user.target\n",
                "    \"enable\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      dcos-setup.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |-\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Signal CloudFormation Success\n",
                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                "      [Service]\n",
                "      Type=simple\n",
                "      Restart=on-failure\n",
                "      StartLimitInterval=0\n",
                "      RestartSec=15s\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=PublicSlaveServerGroup\"\n",
                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                "    \"name\": |-\n",
                "      dcos-cfn-signal.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  \"update\":\n",
                "    \"reboot-strategy\": |-\n",
                "      off\n",
                "\"write_files\":\n",
                "- \"content\": |\n",
                "    https://downloads.dcos.io/dcos/stable\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/repository-url\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [\"dcos-config--setup_81829809236553d9f9f32ea8e0877a12b42369c5\", \"dcos-metadata--setup_81829809236553d9f9f32ea8e0877a12b42369c5\"]\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [Journal]\n",
                "    MaxLevelConsole=warning\n",
                "    RateLimitInterval=1s\n",
                "    RateLimitBurst=20000\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/systemd/journald.conf.d/dcos.conf\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    rexray:\n",
                "      loglevel: info\n",
                "      modules:\n",
                "        default-admin:\n",
                "          host: tcp://127.0.0.1:61003\n",
                "      storageDrivers:\n",
                "      - ec2\n",
                "      volume:\n",
                "        unmount:\n",
                "          ignoreusedcount: true\n",
                "  \"path\": |-\n",
                "    /etc/rexray/config.yml\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    MESOS_CLUSTER=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                "- \"content\": |\n",
                "    ADMINROUTER_ACTIVATE_AUTH_MODULE=",
                {
                  "Ref": "OAuthEnabled"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n",
                "- \"content\": |\n",
                "    MASTER_SOURCE=exhibitor_uri\n",
                "    EXHIBITOR_URI=http://",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                ":8181/exhibitor/v1/cluster/status",
                "\n",
                "    EXHIBITOR_ADDRESS=",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    RESOLVERS=169.254.169.253\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                "- \"content\": |\n",
                "    EXHIBITOR_BACKEND=AWS_S3\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_S3_BUCKET=",
                {
                  "Ref": "ExhibitorS3Bucket"
                },
                "",
                "\n",
                "    AWS_S3_PREFIX=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                "- \"content\": |\n",
                "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n",
                "\n",
                "    \"authentication\":{\"enabled\":false},\n",
                "\n",
                "    \"oauth\":{\"enabled\":",
                {
                  "Ref": "OAuthEnabled"
                },
                ",\"authHost\":\"https://dcos.auth0.com\"},",
                "\n",
                "\n",
                "\n",
                "    \"tracking\":{\"enabled\":true}}}}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n",
                "- \"content\": |\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_STACK_ID=",
                {
                  "Ref": "AWS::StackId"
                },
                "",
                "\n",
                "    AWS_STACK_NAME=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "    AWS_IAM_MASTER_ROLE_NAME=",
                {
                  "Ref": "MasterRole"
                },
                "",
                "\n",
                "    AWS_IAM_SLAVE_ROLE_NAME=",
                {
                  "Ref": "SlaveRole"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
                "- \"content\": |\n",
                "    INTERNAL_MASTER_LB_DNSNAME=",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    MASTER_LB_DNSNAME=",
                {
                  "Fn::GetAtt": [
                    "ElasticLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/aws_dnsnames\n",
                "- \"content\": |-\n",
                "    {}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/slave_public\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/aws\n"
              ]
            ]
          }
        },
        "IamInstanceProfile": {
          "Ref": "SlaveInstanceProfile"
        }
      }
    },
    "PublicSlaveLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "PublicSlaveSecurityGroup"
          }
        ],
        "HealthCheck": {
          "Interval": "5",
          "Target": "HTTP:9090/_haproxy_health_check",
          "Timeout": "2",
          "UnhealthyThreshold": "2",
          "HealthyThreshold": "2"
        },
        "Listeners": [
          {
            "Protocol": "TCP",
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "InstanceProtocol": "TCP"
          },
          {
            "Protocol": "TCP",
            "LoadBalancerPort": "443",
            "InstancePort": "443",
            "InstanceProtocol": "TCP"
          }
        ],
        "Subnets": [
          { "Ref": "ElbSubnet1Id" },
          { "Ref": "ElbSubnet2Id" }
        ]
      }
    },
    "PublicSlaveSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VpcId"
        },
        "GroupDescription": "Mesos Slaves Public"
      }
    },
    "PublicSlaveServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "DesiredCapacity": {
          "Ref": "PublicSlaveInstanceCount"
        },
        "MaxSize": {
          "Ref": "PublicSlaveInstanceCount"
        },
        "Tags": [
          {
            "PropagateAtLaunch": "true",
            "Key": "role",
            "Value": "mesos-slave"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "PublicSlaveLaunchConfig"
        },
        "LoadBalancerNames": [
          {
            "Ref": "PublicSlaveLoadBalancer"
          }
        ],
        "VPCZoneIdentifier": [
          { "Ref": "ServerSubnet1Id" },
          { "Ref": "ServerSubnet2Id" }
        ],
        "MinSize": {
          "Ref": "PublicSlaveInstanceCount"
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {
            "Fn::FindInMap": [
              "Parameters",
              "StackCreationTimeout",
              "default"
            ]
          },
          "Count": {
            "Ref": "PublicSlaveInstanceCount"
          }
        }
      }
    },
    "PublicSlaveToMasterIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "IpProtocol": "-1",
        "ToPort": "65535"
      }
    },
    "PublicSlaveToPublicSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "IpProtocol": "-1",
        "ToPort": "65535"
      }
    },
    "PublicSlaveToSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "SourceSecurityGroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "IpProtocol": "-1",
        "ToPort": "65535"
      }
    },
    "SlaveInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "SlaveRole"
          }
        ],
        "Path": "/platforms/mesosphere/"
      }
    },
    "SlaveLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "SlaveSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdb",
            "VirtualName": "ephemeral0"
          }
        ],
        "ImageId":  { "Ref" : "CoreOsAmi" },
        "InstanceType": {
          "Fn::FindInMap": [
            "Parameters",
            "SlaveInstanceType",
            "default"
          ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n",
                "\"coreos\":\n",
                "  \"units\":\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n",
                "      Before=var-lib.mount dbus.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      RemainAfterExit=yes\n",
                "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                "    \"name\": |-\n",
                "      format-var-lib-ephemeral.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Mount /var/lib\n",
                "      Before=dbus.service\n",
                "      [Mount]\n",
                "      What=/dev/xvdb\n",
                "      Where=/var/lib\n",
                "      Type=ext4\n",
                "    \"name\": |-\n",
                "      var-lib.mount\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      etcd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      update-engine.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"mask\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      locksmithd.service\n",
                "  - \"command\": |-\n",
                "      stop\n",
                "    \"name\": |-\n",
                "      systemd-resolved.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      systemd-journald.service\n",
                "  - \"command\": |-\n",
                "      restart\n",
                "    \"name\": |-\n",
                "      docker.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Before=dcos.target\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
                "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
                "    \"name\": |-\n",
                "      dcos-link-env.service\n",
                "  - \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Download DC/OS to this host.\n",
                "      After=network-online.target\n",
                "      Wants=network-online.target\n",
                "      ConditionPathExists=!/opt/mesosphere/\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      ExecStartPre=/usr/bin/curl --keepalive-time 2 -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/stable/bootstrap/995fa9bd946020901e2e57d8cefe89925fc90a71.bootstrap.tar.xz\n",
                "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
                "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
                "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
                "    \"name\": |-\n",
                "      dcos-download.service\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |\n",
                "      [Unit]\n",
                "      Description=Pkgpanda: Specialize DC/OS for this host.\n",
                "      Requires=dcos-download.service\n",
                "      After=dcos-download.service\n",
                "      [Service]\n",
                "      Type=oneshot\n",
                "      StandardOutput=journal+console\n",
                "      StandardError=journal+console\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
                "      [Install]\n",
                "      WantedBy=multi-user.target\n",
                "    \"enable\": !!bool |-\n",
                "      true\n",
                "    \"name\": |-\n",
                "      dcos-setup.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  - \"command\": |-\n",
                "      start\n",
                "    \"content\": |-\n",
                "      [Unit]\n",
                "      Description=AWS Setup: Signal CloudFormation Success\n",
                "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
                "      [Service]\n",
                "      Type=simple\n",
                "      Restart=on-failure\n",
                "      StartLimitInterval=0\n",
                "      RestartSec=15s\n",
                "      EnvironmentFile=/opt/mesosphere/environment\n",
                "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
                "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=SlaveServerGroup\"\n",
                "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
                "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
                "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
                "    \"name\": |-\n",
                "      dcos-cfn-signal.service\n",
                "    \"no_block\": !!bool |-\n",
                "      true\n",
                "  \"update\":\n",
                "    \"reboot-strategy\": |-\n",
                "      off\n",
                "\"write_files\":\n",
                "- \"content\": |\n",
                "    https://downloads.dcos.io/dcos/stable\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/repository-url\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [\"dcos-config--setup_81829809236553d9f9f32ea8e0877a12b42369c5\", \"dcos-metadata--setup_81829809236553d9f9f32ea8e0877a12b42369c5\"]\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    [Journal]\n",
                "    MaxLevelConsole=warning\n",
                "    RateLimitInterval=1s\n",
                "    RateLimitBurst=20000\n",
                "  \"owner\": |-\n",
                "    root\n",
                "  \"path\": |-\n",
                "    /etc/systemd/journald.conf.d/dcos.conf\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    rexray:\n",
                "      loglevel: info\n",
                "      modules:\n",
                "        default-admin:\n",
                "          host: tcp://127.0.0.1:61003\n",
                "      storageDrivers:\n",
                "      - ec2\n",
                "      volume:\n",
                "        unmount:\n",
                "          ignoreusedcount: true\n",
                "  \"path\": |-\n",
                "    /etc/rexray/config.yml\n",
                "  \"permissions\": |-\n",
                "    0644\n",
                "- \"content\": |\n",
                "    MESOS_CLUSTER=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
                "- \"content\": |\n",
                "    ADMINROUTER_ACTIVATE_AUTH_MODULE=",
                {
                  "Ref": "OAuthEnabled"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n",
                "- \"content\": |\n",
                "    MASTER_SOURCE=exhibitor_uri\n",
                "    EXHIBITOR_URI=http://",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                ":8181/exhibitor/v1/cluster/status",
                "\n",
                "    EXHIBITOR_ADDRESS=",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    RESOLVERS=169.254.169.253\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
                "- \"content\": |\n",
                "    EXHIBITOR_BACKEND=AWS_S3\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_S3_BUCKET=",
                {
                  "Ref": "ExhibitorS3Bucket"
                },
                "",
                "\n",
                "    AWS_S3_PREFIX=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
                "- \"content\": |\n",
                "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n",
                "\n",
                "    \"authentication\":{\"enabled\":false},\n",
                "\n",
                "    \"oauth\":{\"enabled\":",
                {
                  "Ref": "OAuthEnabled"
                },
                ",\"authHost\":\"https://dcos.auth0.com\"},",
                "\n",
                "\n",
                "\n",
                "    \"tracking\":{\"enabled\":true}}}}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n",
                "- \"content\": |\n",
                "    AWS_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "",
                "\n",
                "    AWS_STACK_ID=",
                {
                  "Ref": "AWS::StackId"
                },
                "",
                "\n",
                "    AWS_STACK_NAME=",
                {
                  "Ref": "AWS::StackName"
                },
                "",
                "\n",
                "    AWS_IAM_MASTER_ROLE_NAME=",
                {
                  "Ref": "MasterRole"
                },
                "",
                "\n",
                "    AWS_IAM_SLAVE_ROLE_NAME=",
                {
                  "Ref": "SlaveRole"
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
                "- \"content\": |\n",
                "    INTERNAL_MASTER_LB_DNSNAME=",
                {
                  "Fn::GetAtt": [
                    "InternalMasterLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "    MASTER_LB_DNSNAME=",
                {
                  "Fn::GetAtt": [
                    "ElasticLoadBalancer",
                    "DNSName"
                  ]
                },
                "",
                "\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/aws_dnsnames\n",
                "- \"content\": |-\n",
                "    {}\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/slave\n",
                "- \"content\": \"\"\n",
                "  \"path\": |-\n",
                "    /etc/mesosphere/roles/aws\n"
              ]
            ]
          }
        },
        "IamInstanceProfile": {
          "Ref": "SlaveInstanceProfile"
        }
      }
    },
    "SlaveRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Resource": [
                    {
                      "Ref": "AWS::StackId"
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "AWS::StackId"
                          },
                          "/*"
                        ]
                      ]
                    }
                  ],
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:*"
                  ]
                },
                {
                  "Resource": "*",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateTags",
                    "ec2:DescribeInstances",
                    "ec2:CreateVolume",
                    "ec2:DeleteVolume",
                    "ec2:AttachVolume",
                    "ec2:DetachVolume",
                    "ec2:DescribeVolumes",
                    "ec2:DescribeVolumeStatus",
                    "ec2:DescribeVolumeAttribute",
                    "ec2:CreateSnapshot",
                    "ec2:CopySnapshot",
                    "ec2:DeleteSnapshot",
                    "ec2:DescribeSnapshots",
                    "ec2:DescribeSnapshotAttribute",
                    "autoscaling:DescribeAutoScalingGroups",
                    "cloudwatch:PutMetricData"
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "Slaves"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "SlaveSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VpcId"
        },
        "GroupDescription": "Mesos Slaves"
      }
    },
    "SlaveServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "DesiredCapacity": {
          "Ref": "SlaveInstanceCount"
        },
        "MaxSize": {
          "Ref": "SlaveInstanceCount"
        },
        "LaunchConfigurationName": {
          "Ref": "SlaveLaunchConfig"
        },
        "Tags": [
          {
            "PropagateAtLaunch": "true",
            "Key": "role",
            "Value": "mesos-slave"
          }
        ],
        "VPCZoneIdentifier": [
          { "Ref": "ServerSubnet1Id" },
          { "Ref": "ServerSubnet2Id" }
        ],
        "MinSize": {
          "Ref": "SlaveInstanceCount"
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {
            "Fn::FindInMap": [
              "Parameters",
              "StackCreationTimeout",
              "default"
            ]
          },
          "Count": {
            "Ref": "SlaveInstanceCount"
          }
        }
      }
    },
    "SlaveToMasterIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "GroupId": {
          "Ref": "MasterSecurityGroup"
        },
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "IpProtocol": "-1",
        "ToPort": "65535"
      }
    },
    "SlaveToMasterLBIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "2181",
        "GroupId": {
          "Ref": "LbSecurityGroup"
        },
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "IpProtocol": "tcp",
        "ToPort": "2181"
      }
    },
    "SlaveToPublicSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "GroupId": {
          "Ref": "PublicSlaveSecurityGroup"
        },
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "IpProtocol": "-1",
        "ToPort": "65535"
      }
    },
    "SlaveToSlaveIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "0",
        "GroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "SourceSecurityGroupId": {
          "Ref": "SlaveSecurityGroup"
        },
        "IpProtocol": "-1",
        "ToPort": "65535"
      }
    }
  },
  "Outputs": {
    "ExhibitorS3Bucket": {
      "Description": "Exhibitor S3 bucket name",
      "Value": {
        "Ref": "ExhibitorS3Bucket"
      }
    },
    "PublicSlaveDnsAddress": {
      "Description": "Public slaves",
      "Value": { "Fn::GetAtt": ["PublicSlaveLoadBalancer", "DNSName"] }
    },
    "DnsAddress": {
      "Description": "Mesos Master",
      "Value": {
        "Fn::GetAtt": [
          "ElasticLoadBalancer",
          "DNSName"
        ]
      }
    }
  }
}