AWSTemplateFormatVersion: 2010-09-09
Description: AutoScaling ECS Cluster
Metadata:
  DefaultName: EcsClusterBase
  Dependencies:
    - TemplatePath: networking/vpc
      Resources:
        ElbTargetSg: ElbTargetSecGroup
      Outputs:
        AzCount: AzCount
    - TemplatePath: networking/elb-subnets
      Parameters:
        VpcId: VpcId
      Outputs:
        ServerSubnets: WebServerSubnets
      NestedDependency: networking/vpc
    - TemplatePath: analytics/logs-store
      Resources:
        DiagnosticsMp: LinuxLogPolicy
Parameters:
  KeyPairName:
    Type: String
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
    Default: ''
  VpcId:
    Description: 'VPCid associated with the subnets. [elb-subnets.parameters.VpcId]'
    Type: 'AWS::EC2::VPC::Id'
  AzCount:
    Description: >-
      Number of AZ. Third subnet will only be created if number is 3
      [vpc.outputs.AzCount]
    Type: String
  ServerSubnets:
    Description: 'VPCid associated with the subnets. [elb-subnets.outputs.WebServerSubnets]'
    Type: 'List<AWS::EC2::Subnet::Id>'
  ElbTargetSg:
    Description: 'Elb Target Security Group. [vpc.resources.ElbTargetSecGroup]'
    Type: String
  InstanceType:
    Description: Phabricator server instance type
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.8xlarge
      - m4.16xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  BcUbuntuBaseAmiId:
    Description: Image id of the frontend
    Type: 'AWS::EC2::Image::Id'
  WindowsContainerAmiId:
    Description: ECS Optimised AMI.
    Type: 'AWS::EC2::Image::Id'
  DiagnosticsMp:
    Description: ''
    Type: String
  DiskSize:
    Description: ''
    Type: String
    Default: '100'
  LambdaBucket:
    Description: 'Bucket where Lambda Code are Hosted.'
    Type: String
    Default: ''
  LambdaRootPath:
    Description: 'Root Path to Where Lambda Code are Hosted.'
    Type: String
    Default: citrus-rind/prod/
  EcsAgentImage:
    Description: 'AWS ECS Agent Name'
    Type: String
    Default: amazon/amazon-ecs-agent
  EcsAgentVersion:
    Description: 'AWS ECS Agent Name'
    Type: String
    Default: v1.16.0

  # Scaling Parameters
  ScaleTestPeriod:
    Description: Length of time block in seconds to test for thresholds.
    Type: Number
    Default: 60
  ScaleUpPercentage:
    Description: Percentage of extra servers to provision when scaling up.
    Type: Number
    Default: 60
  ScaleUpCooldown:
    Description: Number of seconds before anothe round of scale up happens.
    Type: Number
    Default: 90
  ScaleUpThreshold:
    Description: CPU allocation threshold to scale up at.
    Type: Number
    Default: 75
  ScaleUpTestPeriodCount:
    Description: Number of time block to test for scaling up.
    Type: Number
    Default: 1
  ScaleDownCount:
    Description: Number of servers to decomission when scaling down.
    Type: Number
    Default: -1
  ScaleDownCooldown:
    Description: Number of seconds before anothe round of scale down happens.
    Type: Number
    Default: 120
  ScaleDownThreshold:
    Description: CPU allocation threshold to scale down at.
    Type: Number
    Default: 50
  ScaleDownTestPeriodCount:
    Description: Number of time block to test for scaling up.
    Type: Number
    Default: 2

Conditions:
  IsThreeAz: !Equals 
    - !Ref AzCount
    - '3'
  HasNoKeypair: !Equals 
    - !Ref KeyPairName
    - ''
  IsLambdaBucketParamEmpty: !Equals
    - !Ref LambdaBucket
    - ''
Resources:
  SharedDiskGp:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      FileSystemTags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  MountTarget1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref SharedDiskGp
      SubnetId: !Select 
        - '0'
        - !Ref ServerSubnets
      SecurityGroups:
        - !Ref DatabaseSg
  MountTarget2:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref SharedDiskGp
      SubnetId: !Select ['1', !Ref ServerSubnets]
      SecurityGroups:
        - !Ref DatabaseSg
  MountTarget3:
    Type: 'AWS::EFS::MountTarget'
    Condition: IsThreeAz
    Properties:
      FileSystemId: !Ref SharedDiskGp
      SubnetId: !Select 
        - '2'
        - !Ref ServerSubnets
      SecurityGroups:
        - !Ref DatabaseSg
  EcsCluster:
    Type: 'AWS::ECS::Cluster'
  WindowsAgentGroups:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref ServerSubnets
      LaunchConfigurationName: !Ref WindowsAgentLc
      MinSize: '0'
      MaxSize: '100'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Windows Agent'
          PropagateAtLaunch: 'true'
  WindowsAgentLc:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref WindowsContainerAmiId
      SecurityGroups:
        - !Ref DbTargetClusterSg
        - !Ref ElbTargetSg
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref Ec2InstanceProfile
      KeyName: !If 
        - HasNoKeypair
        - !Ref 'AWS::NoValue'
        - !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref DiskSize
            VolumeType: gp2
      UserData: !Base64 
        'Fn::Sub': |
            <powershell> 
            [Environment]::SetEnvironmentVariable("ECS_CLUSTER", "${EcsCluster}", "Machine")
            [Environment]::SetEnvironmentVariable("ECS_ENABLE_TASK_IAM_ROLE", "true", "Machine")

            $gateway = (Get-WMIObject -Class Win32_IP4RouteTable | ? {
              $_.Destination -eq '0.0.0.0' -and $_.Mask -eq '0.0.0.0' } |
              Sort-Object Metric1 |
              Select NextHop).NextHop
            $ifIndex = (Get-NetAdapter -InterfaceDescription "Hyper-V Virtual Ethernet*" | Sort-Object | Select ifIndex).ifIndex
            New-NetRoute -DestinationPrefix 169.254.170.2/32 -InterfaceIndex $ifIndex -NextHop $gateway

            $agentZipUri = "https://s3.amazonaws.com/amazon-ecs-agent/ecs-agent-windows-${EcsAgentVersion}.zip";
            $ecsExeDir = "$env:ProgramFiles\Amazon\ECS";
            $zipFile = "$env:TEMP\ecs-agent.zip";
            Invoke-RestMethod -OutFile $zipFile -Uri $agentZipUri;
            Expand-Archive -Path $zipFile -DestinationPath $ecsExeDir -Force;

            $jobname = "ECS-Agent-Init";
            $script = "cd '$ecsExeDir'; .\amazon-ecs-agent.ps1";
            $repeat = (New-TimeSpan -Minutes 1);
            try {Unregister-ScheduledJob -Name $jobname | out-null} catch{};
            Invoke-Expression("cd $ecsExeDir; .\amazon-ecs-agent.ps1");
            $scriptblock = [scriptblock]::Create("$script");
            $trigger = New-JobTrigger -At (Get-Date).Date -RepeatIndefinitely -RepetitionInterval $repeat -Once;
            $options = New-ScheduledJobOption -RunElevated -ContinueIfGoingOnBattery -StartIfOnBattery;
            Register-ScheduledJob -Name $jobname -ScriptBlock $scriptblock -Trigger $trigger -ScheduledJobOption $options -RunNow;

            # end of script
            cfn-signal.exe -e $lastexitcode --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region};
            </powershell>
            <persist>true</persist>
  EcsAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref ServerSubnets
      LaunchConfigurationName: !Ref ContainerInstances
      MinSize: '2'
      MaxSize: '100'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Linux Agent'
          PropagateAtLaunch: 'true'
    #CreationPolicy:
    #  ResourceSignal:
    #    Timeout: PT15M
  ContainerInstances:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    DependsOn:
      - MountTarget1
      - MountTarget2
    Properties:
      ImageId: !Ref BcUbuntuBaseAmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref Ec2InstanceProfile
      KeyName: !If 
        - HasNoKeypair
        - !Ref 'AWS::NoValue'
        - !Ref KeyPairName
      SecurityGroups:
        - !Ref ElbTargetSg
        - !Ref DbTargetClusterSg
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/bash
          apt-get update -qqy && apt-get install -qqy nfs-common
          EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`
          DIR_SRC=$EC2_AVAIL_ZONE.${SharedDiskGp}.efs.${AWS::Region}.amazonaws.com
          mkdir /mnt/efs
          echo -e "$DIR_SRC:/ /mnt/efs nfs defaults 0 0" | tee -a /etc/fstab
          mount -a
          # restart docker service so efs mount can come into effect.
          service docker restart

          sh -c "echo 'net.ipv4.conf.all.route_localnet = 1' >> /etc/sysctl.conf"
          sysctl -p /etc/sysctl.conf
          iptables -t nat -A PREROUTING -p tcp -d 169.254.170.2 --dport 80 -j DNAT --to-destination 127.0.0.1:51679
          iptables -t nat -A OUTPUT -d 169.254.170.2 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 51679
          docker run -d --restart=always \
            -e ECS_AVAILABLE_LOGGING_DRIVERS=[\"json-file\",\"awslogs\"] \
            -e ECS_ENABLE_TASK_IAM_ROLE_NETWORK_HOST=true \
            -e ECS_ENABLE_TASK_IAM_ROLE=true \
            -e ECS_CLUSTER=${EcsCluster} \
            -e ECS_LOGFILE=/log/ecs-agent.log \
            -e ECS_DATADIR=/data \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v /var/log/ecs/:/log \
            -v /var/lib/ecs/data:/data \
            -p 127.0.0.1:51678:51678 \
            -p 127.0.0.1:51679:51679 \
            ${EcsAgentImage}:${EcsAgentVersion}

      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref DiskSize
            VolumeType: gp2
  Ec2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /platforms/ecs/
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:CreateCluster'
                  - 'ecs:DeregisterContainerInstance'
                  - 'ecs:DiscoverPollEndpoint'
                  - 'ecs:Poll'
                  - 'ecs:RegisterContainerInstance'
                  - 'ecs:StartTelemetrySession'
                  - 'ecs:Submit*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:GetAuthorizationToken'
                Resource: '*'
      ManagedPolicyArns:
        - !Ref DiagnosticsMp
  Ec2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /platforms/ecs/
      Roles:
        - !Ref Ec2Role
  DatabaseSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      SecurityGroupIngress:
        - IpProtocol: '-1'
          SourceSecurityGroupId: !Ref DbTargetClusterSg
      VpcId: !Ref VpcId
      GroupDescription: RancherOS Database Security Group
  DbTargetClusterSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      SecurityGroupIngress: []
      VpcId: !Ref VpcId
      GroupDescription: Security group for database security to allow ingress from.
  ClusterSelfIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref DbTargetClusterSg
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref DbTargetClusterSg

  # Start of Instance Draining Handling
  LinuxTerminateHook:
    Type: "AWS::AutoScaling::LifecycleHook"
    Properties:
      AutoScalingGroupName: !Ref EcsAutoScalingGroup
      DefaultResult: ABANDON
      HeartbeatTimeout: 900
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      NotificationTargetARN: !Ref ScalingEvents
      RoleARN:
         Fn::GetAtt: ["LinuxTerminateHookPermission", "Arn"]
  LinuxTerminateHookPermission:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "autoscaling.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: "/"
  ScalingEvents:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint:
             Fn::GetAtt: ["ScalingEventsProcessor", "Arn"]
          Protocol: lambda
  ScalingEventsProcessor:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !If [IsLambdaBucketParamEmpty, !Sub "glenfiddich-${AWS::Region}", !Ref LambdaBucket]
        S3Key: !Sub ${LambdaRootPath}ecs-drain-instance.zip
      Handler: index.handler
      Description: ECS scaling event processor
      Role:
         Fn::GetAtt: ["ScalingEventsProcessorPermission", "Arn"]
      Runtime: nodejs6.10
      Timeout: 300
      Environment:
        Variables:
          CLUSTER_NAME: !Ref EcsCluster
  ScalingEventsProcessorPermission:
    Type: "AWS::IAM::Role"
    Properties:
      Policies:
        -
          PolicyName: "lambda-inline"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - autoscaling:CompleteLifecycleAction
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeHosts
                  - ecs:ListContainerInstances
                  - ecs:SubmitContainerStateChange
                  - ecs:SubmitTaskStateChange
                  - ecs:DescribeContainerInstances
                  - ecs:UpdateContainerInstancesState
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                  - sns:Publish
                  - sns:ListSubscriptions
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
      Path: "/"
  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref ScalingEventsProcessor
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref ScalingEvents
  LambdaSubscriptionToSNSTopic:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt: ["ScalingEventsProcessor", "Arn"]
      Protocol: 'lambda'
      TopicArn: !Ref ScalingEvents
  # End of Instance Draining Handling

  # Start of ECS Auto Scaling
  LinuxScaleUpPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "PercentChangeInCapacity"
      AutoScalingGroupName: !Ref "EcsAutoScalingGroup"
      Cooldown: !Ref ScaleUpCooldown
      ScalingAdjustment: !Ref ScaleUpPercentage
  LinuxScaleDownPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref "EcsAutoScalingGroup"
      Cooldown: !Ref ScaleUpCooldown
      ScalingAdjustment: !Ref ScaleDownCount
  LinuxCapacityAlarmLow:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: !Sub |
        Scale-down if cpu reservation < ${ScaleUpThreshold}% for ${ScaleUpTestPeriodCount} * ${ScaleTestPeriod} seconds
      MetricName: "CPUReservation"
      Namespace: "AWS/ECS"
      Statistic: "Maximum"
      Period: !Ref ScaleTestPeriod
      EvaluationPeriods: !Ref ScaleUpTestPeriodCount
      Threshold: !Ref ScaleUpThreshold
      AlarmActions: [!Ref LinuxScaleUpPolicy]
      Dimensions:
        - Name: "ClusterName"
          Value: !Ref "EcsCluster"
      ComparisonOperator: "GreaterThanThreshold"
  LinuxCapacityAlarmHigh:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: !Sub |
        Scale-down if cpu reservation < ${ScaleDownThreshold}% for ${ScaleDownTestPeriodCount} * ${ScaleTestPeriod} seconds
      MetricName: "CPUReservation"
      Namespace: "AWS/ECS"
      Statistic: "Maximum"
      Period: !Ref ScaleTestPeriod
      EvaluationPeriods: !Ref ScaleDownTestPeriodCount
      Threshold: !Ref ScaleDownThreshold
      AlarmActions: [!Ref LinuxScaleDownPolicy]
      Dimensions: 
        - Name: "ClusterName"
          Value: !Ref "EcsCluster"
      ComparisonOperator: "LessThanThreshold"
  # End of ECS Auto Scaling

Outputs:
  EcsAdminUrl:
    Description: Ec2 Container Service Cluster
    Value: !Sub >-
      https://${AWS::Region}.console.aws.amazon.com
      /ecs/home?region=${AWS::Region}#/clusters/${EcsCluster}/containerInstances'
