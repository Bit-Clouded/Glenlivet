{
	"AWSTemplateFormatVersion": "2010-09-09",

	"Description": "A template to launch Odoo servers.",

	"Metadata" : {
        "DefaultName" : "Odoo"
    },
    "Parameters": {
        "KeyPairName": {
            "Description": "Name of an existing EC2 KeyPair",
            "Type": "String"
        },

        "DbName": {
            "Default": "odoo",
            "Description" : "The database name",
            "Type": "String",
            "MinLength": "1",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
        },
        "DbMultiAZ" : {
            "Default" : false,
            "Description" : "Allow MultiAZ database deployment ",
            "Type" : "String",
            "AllowedValues" : [ true, false ]
        },
		"SslCertId" : {
			"Description": "Id of the SSL certificate to use.",
			"Default" : "",
            "Type": "String"
		},
        "DbVersion" : {
            "Description": "Postgres version",
            "Type": "String",
            "Default": "9.4.7",
            "AllowedValues": [
                "9.5.2",
                "9.4.7",
                "9.4.5",
                "9.4.4",
                "9.4.1"
            ]
        },
        "DbSnapshotIdentifier" : {
            "Description" : "Optional- The RDS snapshot name to restore to the new DB instance.",
            "Type": "String",
            "Default": ""
        },
        "DbStorageEncrypted" : {
            "Default" : false,
            "Description" : "Specifies whether the DB instance is encrypted",
            "Type" : "String",
            "AllowedValues" : [ true, false ]
        },
        "DbUsername": {
            "Default": "odoo",
            "Description" : "The database admin account username",
            "Type": "String",
            "MinLength": "1",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
        },
        "DbPassword": {
            "Default": "Password1234",
            "NoEcho": "true",
            "Description" : "The database admin account password",
            "Type": "String",
            "MinLength": "8"
        },
        "DbInstanceType" : {
			"Description" : "MariaDB server instance type",
			"Type" : "String",
			"Default" : "db.t2.micro",
			"AllowedValues": [
				"db.t2.micro",
				"db.t2.small",
				"db.t2.medium",
				"db.t2.large",
				"db.m3.medium",
				"db.m4.large",
				"db.m4.xlarge",
				"db.m4.2xlarge",
				"db.r3.large",
				"db.r3.xlarge",
				"db.r3.2xlarge",
				"db.r3.4xlarge",
				"db.r3.8xlarge"
			],
			"ConstraintDescription" : "must be a valid RDS instance type."
		},

        "DbAllocatedStorage" : {
            "Default": "5",
            "Description" : "The size of the database (Gb)",
            "Type": "Number",
            "MinValue": "5",
            "MaxValue": "6144",
            "ConstraintDescription" : "must be between 5+"
        },
        "ProxyAccess": {
            "Description": "The IP address range that can be used to access the Kong proxy port 8000",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0\/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
        },
        "AdminAccess": {
            "Description": "The IP address range that can be used to access the Kong Admin port 8001",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0\/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x\/x."
        },
		"DbSubnetGroup" : {
			"Description" : "Subnet Group for hosting the MariaDB server. [private-subnets.resources.RdsSubnetGroup]",
			"Type" : "String"
		},

        "ServerInstanceType" : {
            "Description" : "GoCDmaster server EC2 instance type",
            "Type" : "String",
            "Default" : "t2.micro",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m3.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge"
            ],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },
        
        "OdooStateDiskSize" : {
			"Description" : "Size of the disk for storing Odoo state.",
			"Type" : "Number",
			"Default" : "100"
		},

        "OdooContainer": {
            "Description": "Odoo container name with tag.",
            "Default": "odoo:10.0",
            "Type": "String"
        },
        "DebianJsAmiId": {
            "Description": "Debian Jessie AMI Id",
            "Type": "String"
        },

        "ElbSg" : {
            "Description": "Elb Security Group. [vpc.resources.ElbSecGroup]",
            "Type": "String"
        },
        "ElbTargetSg" : {
            "Description": "Elb Target Security Group. [vpc.resources.ElbTargetSecGroup]",
            "Type": "String"
        },
        "HttpSg" : {
            "Description": "Elb Target Security Group. [vpc.resources.HttpNsSecGroup]",
            "Type": "String"
        },
        "IsPublicFacing": {
            "Description" : "Is publicly accessable deployment.",
            "Type" : "String",
            "AllowedValues": [
                "internet-facing",
                "internal"
            ],
            "Default": "internal",
            "ConstraintDescription": "Valid schemes: 'internet-facing' or 'internal'."
        },
        "VpcId": {
            "Description" : "VPCid associated with the subnets. [elb-subnets.parameters.VpcId]",
            "Type": "AWS::EC2::VPC::Id"
        },
        "ElbSubnets" : {
            "Description" : "VPCid associated with the subnets. [elb-subnets.outputs.ElbSubnets]",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "ServerSubnets" : {
            "Description" : "VPCid associated with the subnets. [elb-subnets.outputs.WebServerSubnets]",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },

        "CwlUbuntuAgentDocker": {
            "Description": "Name of cluster. This is used for discovery.",
            "Type": "String",
            "Default": "bitclouded/aws-cwl-agent:4.1"
        },
        "CwlLinuxParams" : {
            "Description": "Environment variables for syslog and authlog cwl group names [logs-store.outputs.LxDockerLogParams]",
            "Type": "String"
        },
        "CwlDockerParams" : {
            "Description": "Docker log driver params [logs-store.outputs.DockerCwlParams]",
            "Type": "String"
        },
        "CwlPolicy" : {
            "Description": "Managed policy for linux logging. [logs-store.resources.LinuxLogPolicy]",
            "Type": "String"
        }
    },

    "Mappings" : {
		"InstanceVariables" : {
			"t2.micro": { "ram" : "450" },
			"t2.small": { "ram" : "950" },
			"t2.medium": { "ram" : "1950" },
			"m3.medium": { "ram" : "1800", "lspotprice": "0.028", "wspotprice": "0.08" },
			"m3.large": { "ram" : "3600", "lspotprice": "0.056", "wspotprice": "0.15" },
			"m3.xlarge": { "ram" : "7000", "lspotprice": "0.111", "wspotprice": "0.271" },
			"m3.2xlarge": { "ram" : "14500", "lspotprice": "0.222", "wspotprice": "0.543" },
			"r3.large": { "ram" : "7500", "lspotprice": "0.065", "wspotprice": "0.155" },
			"r3.xlarge": { "ram" : "15000", "lspotprice": "0.130", "wspotprice": "0.280" },
			"r3.2xlarge": { "ram" : "30000", "lspotprice": "0.261", "wspotprice": "0.539" },
			"r3.4xlarge": { "ram" : "60000", "lspotprice": "0.522", "wspotprice": "0.948" },
			"r3.8xlarge": { "ram" : "12000", "lspotprice": "1.043", "wspotprice": "1.228" }
		}
	},

	"Conditions" : {
        "UseDbSnapshot" : {
            "Fn::Not" : [{ "Fn::Equals" : [
                {"Ref" : "DbSnapshotIdentifier"}, ""
            ]}]
        },
		"IsPublicFacingCondition" : {
			"Fn::Equals": [{"Ref":"IsPublicFacing"},"true"]
		},
		"HasSsl" : {"Fn::Not": [{"Fn::Equals": [
			{"Ref": "SslCertId"}, ""
		]}]}
	},

    "Resources" : {

        "HttpGateway" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "Subnets": {"Ref": "ElbSubnets"},
                "Listeners" : [
                    {
                        "LoadBalancerPort" : "80",
                        "InstancePort" : "8069",
                        "Protocol" : "HTTP"
                    },
                    {"Fn::If" : [ "HasSsl",
                    {
                        "LoadBalancerPort" : "443",
                        "InstancePort" : "8069",
                        "Protocol" : "HTTPS",
                        "InstanceProtocol": "HTTP",
                        "SSLCertificateId": { "Ref": "SslCertId" }
                    },{"Ref":"AWS::NoValue"}]}
                ],
                "HealthCheck" : {
                    "Target" : { "Fn::Join" : [ "", ["TCP:8069"]]},
                    "HealthyThreshold" : "3",
                    "UnhealthyThreshold" : "5",
                    "Interval" : "30",
                    "Timeout" : "5"
                },
                "SecurityGroups": [
                    { "Ref": "ElbSg" },
                    { "Ref": "HttpSg" }
                ],
                "Scheme": { "Ref" : "IsPublicFacing" }
            }
        },

        "OdooSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Odoo Server Security Group",
				"VpcId" : { "Ref" : "VpcId"},
				"SecurityGroupEgress" : [
					{ "IpProtocol": "-1", "CidrIp": "0.0.0.0/0" }
				],
				"Tags": [
                    {"Key": "Name", "Value" : "Odoo Security Group"}
                ]
			}
        },

        "RepoDisk" : {
			"Type":"AWS::EC2::Volume",
			"Properties" : {
				"AvailabilityZone" : {"Fn::Select":["0", { "Fn::GetAZs": "" }]},
				"Size" : {"Ref": "OdooStateDiskSize"},
				"Tags" : [],
				"VolumeType" : "gp2"
			}
		},

        "ServerScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier" : { "Ref" : "ServerSubnets" },
                "LaunchConfigurationName": {
                    "Ref": "OdooLcConfig"
                },
                "MinSize": "1",
                "MaxSize": "5",
                "LoadBalancerNames": [
                    {"Ref" : "HttpGateway"}
                ],
                "Tags" : [
                    { "Key" : "Name", "Value" : "Odoo Web Server", "PropagateAtLaunch" : "true" }
                ]
            }
        },
        
        "OdooLcConfig" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
                "IamInstanceProfile" : {"Ref":"WebServersInstanceProfile"},
                "InstanceType" : { "Ref" : "ServerInstanceType" },
                "ImageId" : { "Ref" : "DebianJsAmiId" },
                "KeyName" : { "Ref" : "KeyPairName" },
                "SecurityGroups": [
                    {
                        "Ref": "OdooSecurityGroup"
                    },
                    {   
                        "Ref" : "ElbTargetSg" 
                    }
                ],
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",
                    "ECID=$(curl http://instance-data/latest/meta-data/instance-id)\n",
					"CWLA=odoo_$ECID\n",
					"docker run -d --restart=always ",
						"--name $CWLA --log-opt awslogs-stream=$CWLA ",
						"-v /var/log:/var/log-host:ro ",
						{"Ref":"CwlLinuxParams"}," ",
						{"Ref":"CwlDockerParams"}," ",
						{"Ref":"CwlUbuntuAgentDocker"},"\n",
					"docker run -d --restart=always --name cwlcron ",
						{"Ref":"CwlUbuntuAgentDocker"}," cron\n",

                    "docker run -d --restart=always -p 8069:8069 --name odoo ",
                    "-e HOST=", {"Fn::GetAtt": ["PostgresDB", "Endpoint.Address"]}," ",
                    "-e PORT=5432 ",
                    "-e USER=", {"Ref": "DbUsername"}," ",
                    "-e PASSWORD=", {"Ref": "DbPassword"}," ",
                    {"Ref" : "OdooContainer"}, "\n"

                ]]}}
            }
        },

		"WebServersInstanceProfile" : {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/devservices/odoo/",
				"Roles": [{"Ref" : "WebServersRole"}]
			}
		},

        "WebServersRole" : {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    }]
                },
                "Path": "/devservices/odoo/",
				"ManagedPolicyArns" : [
					{"Ref":"CwlPolicy"}
				]
            }
        },

        "PostgresDB" : {
    	    "Type" : "AWS::RDS::DBInstance",
            "Properties" : {
                "Engine" : "postgres",
                "DBName" : { "Ref" : "DbName" },
                "MasterUsername" : { "Ref" : "DbUsername" },
                "DBInstanceClass" : { "Ref" : "DbInstanceType" },
                "AllocatedStorage" : { "Ref" : "DbAllocatedStorage" },
                "MasterUserPassword" : { "Ref" : "DbPassword" },
                "DBSubnetGroupName" : { "Ref" : "DbSubnetGroup" },
                "EngineVersion" : {"Ref" : "DbVersion"},
                "DbSnapshotIdentifier" : {
                    "Fn::If" : [
                        "UseDbSnapshot",
                        { "Ref" : "DbSnapshotIdentifier" },
                        { "Ref" : "AWS::NoValue"}
                    ]
                },
                "MultiAZ" : { "Ref" : "DbMultiAZ" },
                "StorageEncrypted" : { "Ref" : "DbStorageEncrypted" },
                "StorageType" : "gp2",
                "VPCSecurityGroups": [
                    {
                        "Ref": "DbSecurityGroup"
                    }
                ]
            },
            "DeletionPolicy" : "Snapshot"
        },
        "DbSecurityGroup": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Database security groups",
                "SecurityGroupIngress": [{
                    "ToPort": "5432",
                    "IpProtocol": "tcp",
                    "FromPort": "5432",
                    "SourceSecurityGroupId": { "Ref": "OdooSecurityGroup" }
                }],
                "VpcId" : { "Ref" : "VpcId" }
            }
        }
    },
    
    "Outputs" : {
        "EsElb" : {
            "Value" : { "Fn::GetAtt" : ["HttpGateway", "DNSName"] },
            "Description" : "Private A record for Odoo ELB"
        }
    }
}