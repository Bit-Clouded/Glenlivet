AWSTemplateFormatVersion: 2010-09-09
Description: Jenkins with Windows and Linux Build Agents on AutoScaling Groups
Metadata:
  DefaultName: Jenkins
  Dependencies:
    - TemplatePath: networking/vpc
      Resources:
        ElbSg: ElbSecGroup
        ElbTargetSg: ElbTargetSecGroup
        HttpSg: HttpNsSecGroup
    - TemplatePath: networking/elb-subnets
      Parameters:
        VpcId: VpcId
      Outputs:
        ServerSubnets: WebServerSubnets
      NestedDependency: networking/vpc
    - TemplatePath: analytics/logs-store
      Resources:
        CwlPolicy: LinuxLogPolicy
        RawLogBucket: Raw
      Outputs:
        CwlLinuxParams: LxDockerLogParams
        CwlDockerParams: DockerCwlParams
    - TemplatePath: development-services/cicd-base
      Resources:
        ServerSg: ServerSg
        AgentSg: AgentSg
        AgentInstanceProfile: AgentInstanceProfile
        ServerInstanceProfile: ServerInstanceProfile
    - TemplatePath: hosting/loadbalancer
      Resources:
        HttpsListener: HttpsListener
        HttpListener: HttpListener
      Outputs:
        GatewayCanonicalZoneId: GatewayCanonicalZonId
        GatewayDnsName: GatewayDnsName
        GatewayName: GatewayName

Parameters:
  KeyPairName:
    Description: Name of an existing EC2 KeyPair
    Type: String
    Default: ''

  HostedZoneName:
    Description: Hosted Zone for the url (Without '.' at the end). You need to fill in Subdomain as well for custom domain to work.
    Type: String
  Subdomain:
    Description: Subdomain (Without '.'  at the end). You need to fill in HostedZoneName as well for custom domain to work.
    Type: String
  HttpsListener:
    Type: String
    Description: 'Loadbalancer HTTS listener'
    # Https is allowed to be optional.
    Default: ''
  HttpListener:
    Type: String
    Description: 'Loadbalancer HTT listener'
  ListenerPriority:
    Description: ''
    Type: Number
    Default: 30
  GatewayName:
    Type: String
    Description: 'Loadbalancer full name'
  GatewayDnsName:
    Type: String
    Description: 'Loadbalancer DNS name'
  GatewayCanonicalZoneId:
    Type: String
    Description: 'Loadbalancer Zone ID'

  ServerSubnets:
    Description: 'VPCid associated with the subnets.'
    Type: 'List<AWS::EC2::Subnet::Id>'
  ServerInstanceType:
    Description: Jenkins master server EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - m5.large
      - m5.xlarge
      - m5.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  BcUbuntuBaseAmiId:
    Description: Debian Jessie AMI Id.
    Type: String
  JenkinsStateDiskSnapshot:
    Description: Snapshot of jenkins state disk
    Type: String
    Default: ''
  JenkinsStateDiskSize:
    Description: Size of the disk for storing Jenkins state.
    Type: Number
    Default: '100'
  JenkinsAgentDiskSize:
    Description: Size of the disk for storing Jenkins state.
    Type: Number
    Default: '200'
  AgentInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - r5.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  WindowsContainerAmiId:
    Description: AMI to use for windows build agent.
    Type: String
  JenkinsContainer:
    Description: Jenkins container name with tag.
    Default: 'jenkins:1.642.2'
    Type: String
  JenkinsLxAgentContainer:
    Description: Jenkins swarm agent container name with tag.
    Default: 'bitcloudedci/jenkins-linux-agent:1.1'
    Type: String
  JenkinsAgentUsername:
    Description: Username to allow auto registering of Jenkins agents.
    Default: autojoin
    Type: String
  JenkinsAgentPassword:
    Description: Shared secret to allow auto registering of Jenkins agents.
    Default: Password1234
    Type: String
    NoEcho: 'True'
  VpcId:
    Description: 'VPCid associated with the subnets. '
    Type: String
  ElbSg:
    Description: 'Elb Security Group. '
    Type: String
  ElbTargetSg:
    Description: 'Elb Target Security Group. '
    Type: String
  HttpSg:
    Description: 'Elb Target Security Group. '
    Type: String
  AgentSg:
    Description: 'Shared agent security group'
    Type: String
  ServerSg:
    Description: 'Shared server security group'
    Type: String
  AgentInstanceProfile:
    Description: Shared instance profile for the build agents.
    Type: String
  ServerInstanceProfile:
    Description: Shared instance profile for the Jenkins server.
    Type: String

  RawLogBucket:
    Description: 'Elb Target Security Group. '
    Type: String
  CwlUbuntuAgentDocker:
    Description: Name of cluster. This is used for discovery.
    Type: String
    Default: 'bitclouded/aws-cwl-agent:4.1'
  CwlLinuxParams:
    Description: Environment variables for syslog and authlog cwl group names
    Type: String
  CwlDockerParams:
    Description: 'Docker log driver params '
    Type: String
  CwlPolicy:
    Description: 'Managed policy for linux logging. '
    Type: String

Conditions:
  HasStateSnapshot: !Not [!Equals [!Ref JenkinsStateDiskSnapshot, '']]
  HasNoKeypair: !Equals [!Ref KeyPairName, '']

Resources:

  RepoDisk:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      Size: !Ref JenkinsStateDiskSize
      SnapshotId: !If 
        - HasStateSnapshot
        - !Ref JenkinsStateDiskSnapshot
        - !Ref 'AWS::NoValue'
      Tags: []
      VolumeType: gp2
    DeletionPolicy: Snapshot
  JenkinsMaster:
    Type: 'AWS::EC2::Instance'
    Properties:
      IamInstanceProfile: !Ref ServerInstanceProfile
      InstanceType: !Ref ServerInstanceType
      ImageId: !Ref BcUbuntuBaseAmiId
      KeyName: !If 
        - HasNoKeypair
        - !Ref 'AWS::NoValue'
        - !Ref KeyPairName
      SecurityGroupIds:
        - !Ref ServerSg
        - !Ref ElbTargetSg
      SubnetId: !Select ['0', !Ref ServerSubnets]
      UserData: !Base64 
        'Fn::Sub':
          - |
            #!/bin/bash
            ${Mkfs}
            umount /mnt/
            mkdir /mnt/xvdb
            cp /etc/fstab /etc/fstab.bak && rm /etc/fstab
            cat /etc/fstab.bak | grep -v ^/dev/nvme0n1 | tee /etc/fstab
            echo -e "/dev/nvme0n1\t/mnt/xvdb\tauto\tdefaults\t0\t2" >> /etc/fstab
            mount -a
            chown -R 1000 /mnt/xvdb

            ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            JENKINS_MASTER=${AWS::StackName}/jenkins-master/$ECID
            docker run -d --restart=always -p 8080:8080 -p 50000:50000 \
              -v /mnt/xvdb:/var/jenkins_home  \
              --name jenkins-master --log-opt awslogs-stream=$JENKINS_MASTER \
              ${CwlLinuxParams} \
              ${JenkinsContainer}
          - Mkfs: !If 
            - HasStateSnapshot
            - ''
            - mkfs -F -t ext4 /dev/nvme0n1
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: '40'
            VolumeType: gp2
      Volumes:
        - Device: xvdb
          VolumeId: !Ref RepoDisk
      Tags:
        - Key: Name
          Value: Jenkins Master

  # Hooking up to the load balancer
  Route53:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Sub ${HostedZoneName}.
      Comment: Hostname
      Name: !Sub ${Subdomain}.${HostedZoneName}.
      Type: A
      AliasTarget:
        DNSName: !Ref GatewayDnsName
        HostedZoneId: !Ref GatewayCanonicalZoneId
  AlbListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup
      Conditions:
        - Field: host-header
          Values: [!Sub '${Subdomain}.${HostedZoneName}']
      ListenerArn: !Ref HttpListener
      Priority: !Ref ListenerPriority
  AlbTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Targets:
        - Id: !Ref JenkinsMaster
          Port: 8080
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckPath: /robots.txt
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: !Ref VpcId
  # End load balancer stuff

  WindowsAgentTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        InstanceInitiatedShutdownBehavior: stop
        BlockDeviceMappings: 
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref JenkinsAgentDiskSize
              VolumeType: gp2
        IamInstanceProfile:
          Name: !Ref AgentInstanceProfile
        SecurityGroupIds: [!Ref AgentSg]
        KeyName: !If 
          - HasNoKeypair
          - !Ref 'AWS::NoValue'
          - !Ref KeyPairName
        ImageId: !Ref WindowsContainerAmiId
        InstanceType: !Ref AgentInstanceType
        Monitoring:
          Enabled: true
        UserData: !Base64 
          'Fn::Sub': |
            <PowerShell>
              mkdir c:\cfn\
              $javaurl = "http://javadl.sun.com/webapps/download/AutoDL?BundleId=104768"
              Invoke-WebRequest -Uri $javaurl -OutFile c:\cfn\java-installer.exe
              start-process -FilePath C:\cfn\java-installer.exe -ArgumentList "/s","/L",".\java-installer.log" -PassThru -Wait
              
              $giturl = "https://github.com/git-for-windows/git/releases/download/v2.21.0.windows.1/Git-2.21.0-64-bit.exe"
              [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
              Invoke-WebRequest -Uri $giturl -OutFile c:\cfn\git-installer.exe
              start-process -FilePath C:\cfn\git-installer.exe -ArgumentList "/SILENT","/COMPONENTS=`"icons,ext\reg\shellhere,assoc,assoc_sh`"" -PassThru -Wait
              $env:Path += ";C:\Program Files\git\bin\"
              
              $swarmjarurl = "http://repo.jenkins-ci.org/releases/org/jenkins-ci/plugins/swarm-client/3.9/swarm-client-3.9.jar"
              Invoke-WebRequest -Uri $swarmjarurl -OutFile c:\cfn\swarm-client-with-dependencies.jar

              mkdir c:\jenkins\
              $instanceId = Invoke-RestMethod http://169.254.169.254/latest/meta-data/instance-id
              $ipv4address = Invoke-RestMethod http://169.254.169.254/latest/meta-data/local-ipv4
              $javaPath = (Get-ChildItem "C:\Program Files\Java\" -Filter java.exe -Recurse).FullName
              Start-Process $javaPath -ArgumentList `
                "-jar","C:\cfn\swarm-client-with-dependencies.jar",`
                "-master","http://${JenkinsMaster.PrivateIp}:8080",`
                "-username","${JenkinsAgentUsername}",`
                "-password","${JenkinsAgentPassword}",`
                "-name","win-$instanceId",`
                "-description","$ipv4address",`
                "-fsroot","C:\jenkins\",`
                "-executors","2",`
                "-labels","windows"
            </PowerShell>
  WindowsAgentAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref ServerSubnets
      LaunchTemplate:
        LaunchTemplateId: !Ref WindowsAgentTemplate
        Version: !GetAtt WindowsAgentTemplate.LatestVersionNumber
      MinSize: '0'
      MaxSize: '20'
      Tags:
        - Key: Name
          Value: Jenkins Agent
          PropagateAtLaunch: 'True'
  LinuxAgentTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        InstanceInitiatedShutdownBehavior: stop
        BlockDeviceMappings: 
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref JenkinsAgentDiskSize
              VolumeType: gp2
        IamInstanceProfile:
          Name: !Ref AgentInstanceProfile
        SecurityGroupIds: [!Ref AgentSg]
        KeyName: !If 
        - HasNoKeypair
        - !Ref 'AWS::NoValue'
        - !Ref KeyPairName
        ImageId: !Ref BcUbuntuBaseAmiId
        InstanceType: !Ref AgentInstanceType
        Monitoring:
          Enabled: true
        UserData: !Base64 
          'Fn::Sub': |
            #!/bin/bash
            ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            $JENKINS_AGENT=${AWS::StackName}/jenkins-linux-agent/$ECID
            docker run -d --restart=always --name jenkins-linux-agent \
              --log-opt awslogs-stream=$JENKINS_AGENT \
              -v /var/run/docker.sock:/var/run/docker.sock --privileged \
              ${CwlLinuxParams} \
              -e JENKINS_HOST=${JenkinsMaster.PrivateIp} \
              -e JENKINS_USERNAME=${JenkinsAgentUsername} \
              -e JENKINS_PASSWORD=${JenkinsAgentPassword} \
              ${JenkinsLxAgentContainer}
  LinuxAgentAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref ServerSubnets
      LaunchTemplate:
        LaunchTemplateId: !Ref LinuxAgentTemplate
        Version: !GetAtt LinuxAgentTemplate.LatestVersionNumber
      MinSize: '0'
      MaxSize: '20'
      Tags:
        - Key: Name
          Value: Jenkins Agent
          PropagateAtLaunch: 'True'

Outputs:
  EsClusterMasters:
    Value: !GetAtt 
      - JenkinsMaster
      - PrivateIp
    Description: IP of the Jenkins server.
