AWSTemplateFormatVersion: 2010-09-09
Description: HA and AutoScaling Realtime setup of Snowplow
Metadata:
  DefaultName: Snowplow
  Dependencies:
    - TemplatePath: networking/vpc
      Resources:
        ElbSg: ElbSecGroup
        ElbTargetSg: ElbTargetSecGroup
        HttpSg: HttpNsSecGroup
    - TemplatePath: networking/elb-subnets
      Parameters:
        VpcId: VpcId
      Outputs:
        ElbSubnets: ElbSubnets
        WebServerSubnets: WebServerSubnets
      NestedDependency: networking/vpc.template
    - TemplatePath: analytics/logs-store
      Resources:
        LxDockerLog: LxDockerLog
        AccessLogBucket: Raw
        CwlPolicy: LinuxLogPolicy
        AccessS3Log: AccessS3Log
    - TemplatePath: hosting/loadbalancer
      Resources:
        HttpsListener: HttpsListener
        HttpListener: HttpListener
      Outputs:
        GatewayCanonicalZoneId: GatewayCanonicalZonId
        GatewayDnsName: GatewayDnsName
        GatewayName: GatewayName
    - TemplatePath: platforms/ecs-base
      Resources:
        EcsCluster: EcsCluster
      Outputs:
        TaskExecutionRoleArn: SharedTaskExecutionRole
        ServiceScalingRole: SharedScalingRole
        ServiceSchedulingRole: SharedSchedulingRole
        ShareScheduleTaskRole: ShareScheduleTaskRole

Parameters:

  # Hosting
  EcsCluster:
    Type: String
    Description: 'ECS Cluster to run the collector and UI on'
  TaskExecutionRoleArn:
    Description: 'Shared task execution role'
    Type: String
  ServiceScalingRole:
    Description: 'Role used for ECS service autoscaling'
    Type: String
  ServiceSchedulingRole:
    Description: 'Role used for ECS service scheduling'
    Type: String
  ShareScheduleTaskRole:
    Description: 'Role used for ECS cron job'
    Type: String
    Default: ''
  # Containers
  CpuReservation:
    Description: ''
    Type: String
    Default: '128'
  MemoryReservation:
    Description: ''
    Type: String
    Default: '500'
  ContainerSssc:
    Description: ''
    Type: String
    Default: 'bitclouded/snowplow-scala-stream-collector:4-1'
  ContainerSse:
    Description: Container for
    Type: String
    Default: 'bitclouded/snowplow-stream-enrich:2-1'
  ContainerSks:
    Description: Container image for s3 sink
    Type: String
    Default: 'bitclouded/snowplow-stream-s3-sink:4-1'
  ContainerSess:
    Description: Container image for elasticsearch sink
    Type: String
    Default: 'bitclouded/snowplow-stream-es-sink:1-1'
  EsHost:
    Description: 'Hostname of Elasticsearch'
    Type: String
    Default: ''

  # Network dependencies
  VpcId:
    Description: 'Vpc ID associated with the subnets.'
    Type: String
  ElbSubnets:
    Description: '[elb-subnets.outputs.ElbSubnets]'
    Type: 'List<AWS::EC2::Subnet::Id>'
  WebServerSubnets:
    Description: 'Subnet to run HA web cluster on.'
    Type: 'List<AWS::EC2::Subnet::Id>'
  ElbSg:
    Description: 'Elb Security Group.'
    Type: String
  ElbTargetSg:
    Description: 'Elb Target Security Group.'
    Type: String
  HttpSg:
    Description: 'Elb Target Security Group.'
    Type: String

  HostedZoneName:
    Description: Hosted Zone for the url (Without '.' at the end).
    Type: String
  Subdomain:
    Description: Subdomain (Without '.'  at the end).
    Type: String

  # Logging dependencies
  AccessLogBucket:
    Description: 'Loadbalancer access log bucket.'
    Type: String
  LxDockerLog:
    Description: 'Log group for docker logs'
    Type: String
  CwlPolicy:
    Description: 'Managed policy for linux logging'
    Type: String
  AccessS3Log:
    Description: Bucket for holding s3 access logs
    Type: String
  ContainerAwsUtil:
    Description: Container image for awscli and cfn-signal
    Type: String
    Default: 'bitclouded/aws-util:2-1'
  GatewayName:
    Type: String
    Description: 'Loadbalancer full name'
  GatewayDnsName:
    Type: String
    Description: 'Loadbalancer DNS name'
  GatewayCanonicalZoneId:
    Type: String
    Description: 'Loadbalancer Zone ID'
  HttpsListener:
    Type: String
    Description: 'Loadbalancer HTTS listener'
    Default: ''
  HttpListener:
    Type: String
    Description: 'Loadbalancer HTT listener'
  ListenerPriority:
    Description: ''
    Type: Number
    Default: 21
  DeregistrationDelay:
    Description: ''
    Type: Number
    MinValue: 0
    MaxValue: 3600
    Default: 20

Conditions:
  HasSsl: !Not [!Equals [!Ref HttpsListener, '']]
  HasEsHost: !Not [!Equals [!Ref EsHost, '']]

Resources:

  Route53:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Sub ${HostedZoneName}.
      Comment: Hostname
      Name: !Sub ${Subdomain}.${HostedZoneName}.
      Type: A
      AliasTarget:
        DNSName: !Ref GatewayDnsName
        HostedZoneId: !Ref GatewayCanonicalZoneId
  AlbListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup
      Conditions:
        - Field: host-header
          Values: [!Sub '${Subdomain}.${HostedZoneName}']
      ListenerArn: !If
        - HasSsl
        - !Ref HttpsListener
        - !Ref HttpListener
      Priority: !Ref ListenerPriority
  AlbTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: '60'
      HealthCheckPath: '/health'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: '30'
      HealthyThresholdCount: 10
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: !Ref DeregistrationDelay

  # Streams
  RawStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      ShardCount: '1'
  RawStreamBad:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      ShardCount: '1'
  EnrichedStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      ShardCount: '1'
  EnrichedStreamBad:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      ShardCount: '1'
  SinkOutputBad:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      ShardCount: '1'
  # End Streams

  # S3 Bucket
  RawDataStore:
    Type: 'AWS::S3::Bucket'
    DependsOn: NewObjectNotificationPolicy
    Properties:
      AccessControl: Private
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessS3Log
        LogFilePrefix: !Sub '${AWS::StackName}-RawDataStore'
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref NewObjectNotification
            Event: 's3:ObjectCreated:*'
    DeletionPolicy: Retain
  NewObjectNotification:
    Type: 'AWS::SNS::Topic'
  NewObjectNotificationPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          Sid: log-file-created-sns
          Effect: Allow
          Principal:
            AWS: '*'
          Action: ['SNS:Publish']
          Resource: !Ref NewObjectNotification
          Condition:
            ArnLike:
              'aws:SourceArn': 'arn:aws:s3:*:*:*'
      Topics: [!Ref NewObjectNotification]
  # End S3 Bucket

  # Raw read table and scaling
  RawReadCheckpoint:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: leaseKey
          AttributeType: S
      KeySchema:
        - AttributeName: leaseKey
          KeyType: HASH
  # Enriched to S3 table and scaling
  EnrichedToS3Checkpoint:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: leaseKey
          AttributeType: S
      KeySchema:
        - AttributeName: leaseKey
          KeyType: HASH
  # Enriched to ES table and scaling
  EnrichedToEsCheckpoint:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: leaseKey
          AttributeType: S
      KeySchema:
        - AttributeName: leaseKey
          KeyType: HASH
  # End of DynamoDB Table

  # Start Collectors
  CollectorTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      TaskRoleArn: !GetAtt EventCollectionRole.Arn
      ContainerDefinitions:
        - Command: !Ref 'AWS::NoValue'
          Name: snowplow-collector
          Cpu: !Ref CpuReservation
          Essential: 'true'
          Image: !Ref ContainerSssc
          Memory: !Ref MemoryReservation
          Environment:
            - Name: STREAM_GOOD
              Value: !Ref RawStream
            - Name: STREAM_BAD
              Value: !Ref RawStreamBad
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LxDockerLog
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'AWS::StackName'
  CollectorService:
    Type: 'AWS::ECS::Service'
    DependsOn: AlbListenerRule
    Properties:
      Cluster: !Ref EcsCluster
      Role: !Ref ServiceSchedulingRole
      LoadBalancers:
        - ContainerName: snowplow-collector
          ContainerPort: 80
          TargetGroupArn: !Ref AlbTargetGroup
      DesiredCount: 2
      TaskDefinition: !Ref CollectorTaskDefinition
  CollectorScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      RoleARN: !Ref ServiceScalingRole
      MaxCapacity: 50
      MinCapacity: 2
      ResourceId: !Sub 'service/${EcsCluster}/${CollectorService.Name}'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  CollectorScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-Collector'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref CollectorScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        DisableScaleIn: false
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
  EventCollectionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /analytics/snowplow/
      ManagedPolicyArns:
        - !Ref CwlPolicy
      Policies:
        - PolicyName: "kinesis"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'kinesis:DescribeStream'
                  - 'kinesis:MergeShards'
                  - 'kinesis:PutRecord'
                  - 'kinesis:PutRecords'
                  - 'kinesis:SplitShard'
                Effect: Allow
                Resource:
                  - !GetAtt RawStream.Arn
                  - !GetAtt RawStreamBad.Arn
  # End Collectors

  # Start Enrich
  EnrichTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      TaskRoleArn: !GetAtt EnrichRole.Arn
      ContainerDefinitions:
        - Command: !Ref 'AWS::NoValue'
          Name: snowplow-enrich
          Cpu: !Ref CpuReservation
          Essential: 'true'
          Image: !Ref ContainerSse
          Memory: !Ref MemoryReservation
          Environment:
            - Name: STREAM_SOURCE
              Value: !Ref RawStream
            - Name: DDB_CHECKPOINT
              Value: !Ref RawReadCheckpoint
            - Name: STREAM_GOOD
              Value: !Ref EnrichedStream
            - Name: STREAM_BAD
              Value: !Ref EnrichedStreamBad
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LxDockerLog
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'AWS::StackName'
  EnrichService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      TaskDefinition: !Ref EnrichTaskDefinition
  EnrichScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      RoleARN: !Ref ServiceScalingRole
      MaxCapacity: 50
      MinCapacity: 1
      ResourceId: !Sub 'service/${EcsCluster}/${EnrichService.Name}'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  EnrichScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-Enrich'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref EnrichScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        DisableScaleIn: false
        TargetValue: 85
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
  EnrichRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /analytics/snowplow/
      ManagedPolicyArns:
        - !Ref CwlPolicy
      Policies:
        - PolicyName: "kinesis"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'kinesis:DescribeStream'
                  - 'kinesis:MergeShards'
                  - 'kinesis:PutRecord'
                  - 'kinesis:PutRecords'
                  - 'kinesis:SplitShard'
                Effect: Allow
                Resource:
                  - !GetAtt EnrichedStream.Arn
                  - !GetAtt EnrichedStreamBad.Arn
              - Action:
                  - 'kinesis:DescribeStream'
                  - 'kinesis:GetShardIterator'
                  - 'kinesis:GetRecords'
                  - 'kinesis:MergeShards'
                  - 'kinesis:SplitShard'
                Effect: Allow
                Resource:
                  - !GetAtt RawStream.Arn
              - Action:
                  - 'dynamodb:*'
                Effect: Allow
                Resource: [!GetAtt RawReadCheckpoint.Arn]
  # End Enrich

  # Start Enriched
  EnrichedTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      TaskRoleArn: !GetAtt EnrichedRole.Arn
      ContainerDefinitions:
        - Command: !Ref 'AWS::NoValue'
          Name: snowplow-enriched-s3
          Cpu: !Ref CpuReservation
          Essential: 'true'
          Image: !Ref ContainerSks
          Memory: !Ref MemoryReservation
          Environment:
            - Name: STREAM_SOURCE
              Value: !Ref EnrichedStream
            - Name: DDB_CHECKPOINT
              Value: !Ref EnrichedToS3Checkpoint
            - Name: BUCKET_NAME
              Value: !Ref RawDataStore
            - Name: STREAM_BAD
              Value: !Ref SinkOutputBad
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LxDockerLog
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'AWS::StackName'
        - !If 
          - HasEsHost
          - Command: !Ref 'AWS::NoValue'
            Name: snowplow-enriched-es
            Cpu: !Ref CpuReservation
            Essential: 'true'
            Image: !Ref ContainerSess
            Memory: !Ref MemoryReservation
            Environment:
              - Name: STREAM_SOURCE
                Value: !Ref EnrichedStream
              - Name: DDB_CHECKPOINT
                Value: !Ref EnrichedToEsCheckpoint
              - Name: ES_HOST
                Value: !Ref EsHost
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref LxDockerLog
                awslogs-region: !Ref 'AWS::Region'
                awslogs-stream-prefix: !Ref 'AWS::StackName'
          - !Ref AWS::NoValue
  EnrichedService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      TaskDefinition: !Ref EnrichedTaskDefinition
  EnrichedScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      RoleARN: !Ref ServiceScalingRole
      MaxCapacity: 50
      MinCapacity: 1
      ResourceId: !Sub 'service/${EcsCluster}/${EnrichedService.Name}'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  EnrichedScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-Enriched'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref EnrichedScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        DisableScaleIn: false
        TargetValue: 85
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
  EnrichedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /analytics/snowplow/
      ManagedPolicyArns:
        - !Ref CwlPolicy
      Policies:
        - PolicyName: "kinesis"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'kinesis:DescribeStream'
                  - 'kinesis:GetShardIterator'
                  - 'kinesis:GetRecords'
                  - 'kinesis:MergeShards'
                  - 'kinesis:SplitShard'
                Effect: Allow
                Resource:
                  - !GetAtt EnrichedStream.Arn
              - Action:
                  - 'kinesis:DescribeStream'
                  - 'kinesis:MergeShards'
                  - 'kinesis:PutRecord'
                  - 'kinesis:PutRecords'
                  - 'kinesis:SplitShard'
                Effect: Allow
                Resource:
                  - !GetAtt SinkOutputBad.Arn
              - Action:
                  - 'dynamodb:*'
                Effect: Allow
                Resource:
                  - !GetAtt EnrichedToS3Checkpoint.Arn
                  - !GetAtt EnrichedToEsCheckpoint.Arn
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Sub 'arn:aws:s3:::${RawDataStore}/*'
                  - !Sub 'arn:aws:s3:::${RawDataStore}'
  # End Enriched

Outputs:
  EnrichedStreamArn:
    Value: !GetAtt EnrichedStream.Arn