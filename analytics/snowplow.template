AWSTemplateFormatVersion: 2010-09-09
Description: HA and AutoScaling Realtime setup of Snowplow
Metadata:
  DefaultName: Snowplow
  Dependencies:
    - TemplatePath: networking/vpc
      Resources:
        ElbSg: ElbSecGroup
        ElbTargetSg: ElbTargetSecGroup
        HttpSg: HttpNsSecGroup
    - TemplatePath: networking/elb-subnets
      Parameters:
        VpcId: VpcId
      Outputs:
        ElbSubnets: ElbSubnets
        WebServerSubnets: WebServerSubnets
      NestedDependency: networking/vpc.template
    - TemplatePath: analytics/logs-store
      Resources:
        AccessLogBucket: Raw
        CwlPolicy: LinuxLogPolicy
        AccessS3Log: AccessS3Log
      Outputs:
        # TODO fix name
        CwlLinuxParams: LxDockerLogParams
    - TemplatePath: datastore/elasticsearch
      Resources:
        EsHost: EsElb
Parameters:
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: String
    Default: ''
  SslCertId:
    Description: Id of the SSL certificate to use.
    Type: String
    Default: ''
  ContainerSssc:
    Description: ''
    Type: String
    Default: 'bitclouded/snowplow-scala-stream-collector:4-1'
  ContainerSse:
    Description: Container for
    Type: String
    Default: 'bitclouded/snowplow-stream-enrich:2-1'
  ContainerSks:
    Description: Container image for s3 sink
    Type: String
    Default: 'bitclouded/snowplow-stream-s3-sink:4-1'
  ContainerSess:
    Description: Container image for elasticsearch sink
    Type: String
    Default: 'bitclouded/snowplow-stream-es-sink:1-1'
  InstanceType:
    Description: Type of EC2 instance to launch for snowplow servers. c4 family is usually recommended.
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.10xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.8xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  BcUbuntuBaseAmiId:
    Description: Image id of the frontend
    Type: 'AWS::EC2::Image::Id'
  EsHost:
    Description: 'Hostname of Elasticsearch'
    Type: String
    Default: ''

  # Network dependencies
  VpcId:
    Description: 'Vpc ID associated with the subnets.'
    Type: String
  ElbSubnets:
    Description: '[elb-subnets.outputs.ElbSubnets]'
    Type: 'List<AWS::EC2::Subnet::Id>'
  WebServerSubnets:
    Description: 'Subnet to run HA web cluster on.'
    Type: 'List<AWS::EC2::Subnet::Id>'
  ElbSg:
    Description: 'Elb Security Group.'
    Type: String
  ElbTargetSg:
    Description: 'Elb Target Security Group.'
    Type: String
  HttpSg:
    Description: 'Elb Target Security Group.'
    Type: String

  # Logging dependencies
  AccessLogBucket:
    Description: 'Loadbalancer access log bucket.'
    Type: String
  CwlLinuxParams:
    Description: Environment variables for syslog and authlog cwl group names.
    Type: String
  CwlPolicy:
    Description: 'Managed policy for linux logging'
    Type: String
  AccessS3Log:
    Description: Bucket for holding s3 access logs
    Type: String
  ContainerAwsUtil:
    Description: Container image for awscli and cfn-signal
    Type: String
    Default: 'bitclouded/aws-util:2-1'

Conditions:
  HasSsl: !Not [!Equals [!Ref SslCertId, '']]
  HasEsHost: !Not [!Equals [!Ref EsHost, '']]
  HasNoKeypair: !Equals [!Ref KeyPairName, '']

Resources:
  RawStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      ShardCount: '1'
  RawStreamBad:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      ShardCount: '1'
  EnrichedStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      ShardCount: '1'
  EnrichedStreamBad:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      ShardCount: '1'
  SinkOutputBad:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      ShardCount: '1'
  EnrichStreamPermission:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Roles:
        - !Ref EnrichStreamRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'kinesis:DescribeStream'
              - 'kinesis:MergeShards'
              - 'kinesis:PutRecord'
              - 'kinesis:PutRecords'
              - 'kinesis:SplitShard'
            Effect: Allow
            Resource:
              - !GetAtt EnrichedStream.Arn
              - !GetAtt EnrichedStreamBad.Arn
          - Action:
              - 'kinesis:DescribeStream'
              - 'kinesis:GetShardIterator'
              - 'kinesis:GetRecords'
              - 'kinesis:MergeShards'
              - 'kinesis:SplitShard'
            Effect: Allow
            Resource:
              - !GetAtt 
                - RawStream
                - Arn
          - Action:
              - 'dynamodb:*'
            Effect: Allow
            Resource: [!GetAtt RawReadCheckpoint.Arn]
  EnrichedStreamPermission:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Roles:
        - !Ref EnrichedStreamRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'kinesis:DescribeStream'
              - 'kinesis:GetShardIterator'
              - 'kinesis:GetRecords'
              - 'kinesis:MergeShards'
              - 'kinesis:SplitShard'
            Effect: Allow
            Resource:
              - !GetAtt EnrichedStream.Arn
          - Action:
              - 'kinesis:DescribeStream'
              - 'kinesis:MergeShards'
              - 'kinesis:PutRecord'
              - 'kinesis:PutRecords'
              - 'kinesis:SplitShard'
            Effect: Allow
            Resource:
              - !GetAtt 
                - SinkOutputBad
                - Arn
          - Action:
              - 'dynamodb:*'
            Effect: Allow
            Resource:
              - !GetAtt EnrichedToS3Checkpoint.Arn
              - !If 
                - HasEsHost
                - !GetAtt EnrichedToEsCheckpoint.Arn
                - !Ref 'AWS::NoValue'
          - Effect: Allow
            Action:
              - 's3:*'
            Resource:
              - !Sub 'arn:aws:s3:::${RawDataStore}/*'
              - !Sub 'arn:aws:s3:::${RawDataStore}'

  # Raw read table and scaling
  RawReadCheckpoint:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: leaseKey
          AttributeType: S
      KeySchema:
        - AttributeName: leaseKey
          KeyType: HASH
  # Enriched to S3 table and scaling
  EnrichedToS3Checkpoint:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: leaseKey
          AttributeType: S
      KeySchema:
        - AttributeName: leaseKey
          KeyType: HASH

  # Enriched to ES table and scaling
  EnrichedToEsCheckpoint:
    Condition: HasEsHost
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: leaseKey
          AttributeType: S
      KeySchema:
        - AttributeName: leaseKey
          KeyType: HASH

  # End of DynamoDB Table and scaling stuff

  EventCollectionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /analytics/snowplow/
      ManagedPolicyArns:
        - !Ref CwlPolicy

  # Start Autoscaling for Event Collectors
  EcScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: PercentChangeInCapacity
      AutoScalingGroupName: !Ref EventCollectionGroup
      Cooldown: '60'
      ScalingAdjustment: '100'
  EcScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref EventCollectionGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'
  EcCpuHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up snowplow event collectors if CPU > 70% for 1 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '1'
      Threshold: '70'
      AlarmActions:
        - !Ref EcScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref EventCollectionGroup
      ComparisonOperator: GreaterThanThreshold
  EcCpuLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down snowplow event collectors if CPU < 30% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '30'
      AlarmActions:
        - !Ref EcScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref EventCollectionGroup
      ComparisonOperator: LessThanThreshold
  # End Autoscaling for Event Collectors

  EventCollectionGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      MinSize: '2'
      MaxSize: '10'
      LoadBalancerNames:
        - !Ref EventCollectionEndPoint
      LaunchConfigurationName: !Ref EventCollectionLc
      VPCZoneIdentifier: !Ref WebServerSubnets
      Tags:
        - PropagateAtLaunch: 'true'
          Key: Name
          Value: Snowplow Collector
    CreationPolicy:
      ResourceSignal:
        Count: 2
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        WaitOnResourceSignals: 'true'
        PauseTime: PT10M
  EventCollectionLc:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      KeyName: !If 
        - HasNoKeypair
        - !Ref 'AWS::NoValue'
        - !Ref KeyPairName
      ImageId: !Ref BcUbuntuBaseAmiId
      IamInstanceProfile: !Ref EventCollectionIp
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref ElbTargetSg
      UserData: !Base64 
        'Fn::Sub': |
          #!/bin/bash
          ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
          docker run --name ssc -d --restart=always -p 80:80 \
            ${CwlLinuxParams} \
            --log-opt awslogs-stream=${AWS::StackName}/ssc/$ECID \
            -e STREAM_GOOD=${RawStream} -e STREAM_BAD=${RawStreamBad} \
            ${ContainerSssc}
          docker run -t --rm ${ContainerAwsUtil} cfn-signal -e $? --stack ${AWS::StackName} --resource EventCollectionGroup --region ${AWS::Region}
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  EventCollectionPermission:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Roles:
        - !Ref EventCollectionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'kinesis:DescribeStream'
              - 'kinesis:MergeShards'
              - 'kinesis:PutRecord'
              - 'kinesis:PutRecords'
              - 'kinesis:SplitShard'
            Effect: Allow
            Resource:
              - !GetAtt RawStream.Arn
              - !GetAtt RawStreamBad.Arn
  EnrichStreamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /analytics/snowplow/
      ManagedPolicyArns:
        - !Ref CwlPolicy
  EnrichStreamIp:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref EnrichStreamRole
      Path: /analytics/snowplow/
  EventCollectionIp:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref EventCollectionRole
      Path: /analytics/snowplow/
  EnrichStreamGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      MinSize: '1'
      MaxSize: '10'
      LaunchConfigurationName: !Ref EnrichStreamLc
      VPCZoneIdentifier: !Ref WebServerSubnets
      Tags:
        - PropagateAtLaunch: 'true'
          Key: Name
          Value: Snowplow Enrich
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        WaitOnResourceSignals: 'true'
        PauseTime: PT10M
  EnrichStreamLc:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      KeyName: !If 
        - HasNoKeypair
        - !Ref 'AWS::NoValue'
        - !Ref KeyPairName
      ImageId: !Ref BcUbuntuBaseAmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EnrichStreamIp
      SecurityGroups:
        - !Ref Outbound
      UserData: !Base64 
        'Fn::Sub': |
          #!/bin/bash
          ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
          docker run --name sse -d --restart=always --log-opt \
            awslogs-stream=${AWS::StackName}/sse/$ECID ${CwlLinuxParams} \
            -e STREAM_SOURCE=${RawStream} \
            -e DDB_CHECKPOINT=${RawReadCheckpoint} \
            -e STREAM_GOOD=${EnrichedStream} \
            -e STREAM_BAD=${EnrichedStreamBad} \
            ${ContainerSse}
          docker run -t --rm ${ContainerAwsUtil} cfn-signal -e $? --stack ${AWS::StackName} --resource EnrichStreamGroup --region ${AWS::Region}
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'

  # Start Autoscaling for Stream Enrich
  EnrichScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: PercentChangeInCapacity
      AutoScalingGroupName: !Ref EnrichStreamGroup
      Cooldown: '60'
      ScalingAdjustment: '50'
  EnrichScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref EnrichStreamGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'
  EnrichCpuHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up snowplow enricher if CPU > 70% for 1 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '1'
      Threshold: '70'
      AlarmActions:
        - !Ref EnrichScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref EnrichStreamGroup
      ComparisonOperator: GreaterThanThreshold
  EnrichCpuLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down snowplow enricher if CPU < 30% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '30'
      AlarmActions:
        - !Ref EnrichScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref EnrichStreamGroup
      ComparisonOperator: LessThanThreshold
  # End Autoscaling for Stream Enrich

  EnrichedStreamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /analytics/snowplow/
      ManagedPolicyArns:
        - !Ref CwlPolicy
  EnrichedStreamIp:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref EnrichedStreamRole
      Path: /analytics/snowplow/
  EnrichedStreamGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      MinSize: '1'
      MaxSize: '10'
      LaunchConfigurationName: !Ref EnrichedStreamLc
      VPCZoneIdentifier: !Ref WebServerSubnets
      Tags:
        - PropagateAtLaunch: 'true'
          Key: Name
          Value: Snowplow Enriched
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        WaitOnResourceSignals: 'true'
        PauseTime: PT10M
  EnrichedStreamLc:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      KeyName: !If 
        - HasNoKeypair
        - !Ref 'AWS::NoValue'
        - !Ref KeyPairName
      IamInstanceProfile: !Ref EnrichedStreamIp
      ImageId: !Ref BcUbuntuBaseAmiId
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref Outbound
      UserData: !Base64
        'Fn::Join':
          - ''
          - - 'Fn::Sub': |
                #!/bin/bash
                ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                docker run --name sks -d --restart=always --log-opt \
                  awslogs-stream=${AWS::StackName}/sks/$ECID ${CwlLinuxParams} \
                  -e STREAM_SOURCE=${EnrichedStream} \
                  -e DDB_CHECKPOINT=${EnrichedToS3Checkpoint} \
                  -e BUCKET_NAME=${RawDataStore} \
                  -e STREAM_BAD=${SinkOutputBad} \
                  ${ContainerSks}
            - !If 
              - HasEsHost
              - !Sub |
                  docker run --name sess -d --restart=always --log-opt \
                    awslogs-stream=${AWS::StackName}/sess/$ECID ${CwlLinuxParams} \
                    -e STREAM_SOURCE=${EnrichedStream} \
                    -e DDB_CHECKPOINT=${EnrichedToEsCheckpoint} \
                    -e ES_HOST=${EsHost} \
                    ${ContainerSess}
              - ''
            - !Sub docker run -t --rm ${ContainerAwsUtil} cfn-signal -e $? --stack ${AWS::StackName} --resource EnrichedStreamGroup --region ${AWS::Region}
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'

  # Start Autoscaling for Event Collectors
  EnrichedScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: PercentChangeInCapacity
      AutoScalingGroupName: !Ref EnrichedStreamGroup
      Cooldown: '60'
      ScalingAdjustment: '50'
  EnrichedScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref EnrichedStreamGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'
  EnrichedCpuHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up snowplow event collectors if CPU > 70% for 1 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '1'
      Threshold: '70'
      AlarmActions:
        - !Ref EnrichedScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref EnrichedStreamGroup
      ComparisonOperator: GreaterThanThreshold
  EnrichedCpuLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down snowplow event collectors if CPU < 30% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '30'
      AlarmActions:
        - !Ref EnrichedScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref EnrichedStreamGroup
      ComparisonOperator: LessThanThreshold
  # End Autoscaling for Event Collectors

  EventCollectionEndPoint:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Subnets: !Ref ElbSubnets
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
        - !If 
          - HasSsl
          - LoadBalancerPort: '443'
            InstancePort: '80'
            Protocol: HTTPS
            InstanceProtocol: HTTP
            SSLCertificateId: !Ref SslCertId
          - !Ref 'AWS::NoValue'
      HealthCheck:
        Target: 'HTTP:80/health'
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      AccessLoggingPolicy:
        EmitInterval: '5'
        Enabled: 'true'
        S3BucketName: !Ref AccessLogBucket
      SecurityGroups:
        - !Ref ElbSg
        - !Ref HttpSg
      Scheme: internet-facing
  Outbound:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Unlimited outbound access.
      VpcId: !Ref VpcId
  RawDataStore:
    Type: 'AWS::S3::Bucket'
    DependsOn: NewObjectNotificationPolicy
    Properties:
      AccessControl: Private
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessS3Log
        LogFilePrefix: !Sub '${AWS::StackName}-RawDataStore'
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref NewObjectNotification
            Event: 's3:ObjectCreated:*'
    DeletionPolicy: Retain
  NewObjectNotification:
    Type: 'AWS::SNS::Topic'
  NewObjectNotificationPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          Sid: log-file-created-sns
          Effect: Allow
          Principal:
            AWS: '*'
          Action: ['SNS:Publish']
          Resource: !Ref NewObjectNotification
          Condition:
            ArnLike:
              'aws:SourceArn': 'arn:aws:s3:*:*:*'
      Topics: [!Ref NewObjectNotification]

Outputs:
  EnrichedStreamArn:
    Value: !GetAtt EnrichedStream.Arn