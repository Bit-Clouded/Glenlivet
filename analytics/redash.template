AWSTemplateFormatVersion: 2010-09-09
Metadata:
  DefaultName: Redash
  Dependencies:
    - TemplatePath: networking/vpc
      Resources:
        VpcId: Vpc
    - TemplatePath: analytics/logs-store
      Resources:
        LxDockerLog: LxDockerLog
        CwlPolicy: LinuxLogPolicy
    - TemplatePath: platforms/ecs-base
      Resources:
        DatabaseSg: DatabaseSg
        EcsCluster: EcsCluster
      Outputs:
        TaskExecutionRoleArn: SharedTaskExecutionRole
        ServiceScalingRole: SharedScalingRole
        ServiceSchedulingRole: SharedSchedulingRole
        ShareScheduleTaskRole: ShareScheduleTaskRole
    - TemplatePath: hosting/loadbalancer
      Resources:
        HttpsListener: HttpsListener
        HttpListener: HttpListener
      Outputs:
        GatewayCanonicalZoneId: GatewayCanonicalZonId
        GatewayDnsName: GatewayDnsName
        GatewayName: GatewayName
    - TemplatePath: networking/private-subnets
      Resources:
        DbSubnetGroup: RdsSubnetGroup
        RedisSubnetGroup: ElasticCacheSubnetGroup
      NestedDependency: networking/vpc

Parameters:
  EcsCluster:
    Type: String
    Description: 'ECS Cluster to run the collector and UI on'
  DeregistrationDelay:
    Description: ''
    Type: Number
    MinValue: 0
    MaxValue: 3600
    Default: 20
  CpuReservation:
    Description: ''
    Type: String
    Default: '256'
  MemoryReservation:
    Description: ''
    Type: String
    Default: '1024'
  DatabaseSg:
    Type: String
    Description: 'Security group to allow access from ECS cluster'
  DbInstanceType:
    Description: Postgres server instance type
    Type: String
    Default: db.t2.small
    AllowedValues:
      - db.t2.small
      - db.t2.medium
      - db.t2.large
      - db.m3.medium
      - db.m4.large
      - db.m4.xlarge
      - db.m4.2xlarge
      - db.r3.large
      - db.r3.xlarge
      - db.r3.2xlarge
      - db.r3.4xlarge
      - db.r3.8xlarge
    ConstraintDescription: must be a valid RDS instance type.
  DbUsername:
    Description: MariaDB server username
    Type: String
    Default: sqladmin
  DbPassword:
    Description: MariaDB server password
    Type: String
    Default: Password1234
    NoEcho: 'True'
  DbSnapshot:
    Description: MariaDB server snapshot
    Type: String
    Default: ''
  DbSubnetGroup:
    Description: Subnet Group for hosting the MariaDB server.
    Type: String
  RedisSubnetGroup:
    Description: ''
    Type: String
  VpcId:
    Description: VPCid associated with the subnets.
    Type: 'AWS::EC2::VPC::Id'
  HostedZoneName:
    Description: Hosted Zone for the url (Without '.' at the end). You need to fill in Subdomain as well for custom domain to work.
    Type: String
  Subdomain:
    Description: Subdomain (Without '.'  at the end). You need to fill in HostedZoneName as well for custom domain to work.
    Type: String
  RedashContainerMain:
    Description: Dockerhub image name.
    Type: String
    Default: 'redash/redash:5.0.0.b4754'
  RedashContainerNginx:
    Description: Dockerhub image name.
    Type: String
    Default: 'redash/nginx:latest'
  CwlPolicy:
    Description: Managed policy for linux logging.
    Type: String
  GatewayName:
    Type: String
    Description: 'Loadbalancer full name'
  GatewayDnsName:
    Type: String
    Description: 'Loadbalancer DNS name'
  GatewayCanonicalZoneId:
    Type: String
    Description: 'Loadbalancer Zone ID'
  HttpsListener:
    Type: String
    Description: 'Loadbalancer HTTS listener'
    Default: ''
  HttpListener:
    Type: String
    Description: 'Loadbalancer HTT listener'
  ListenerPriority:
    Description: ''
    Type: Number
    Default: 20
  LxDockerLog:
    Description: ''
    Type: String

  RedisInstanceType:
    Description: Type of Redis instance to launch. Leave blank to NOT provision Redis.
    Type: String
    Default: cache.t2.micro
    AllowedValues:
      - cache.t2.micro
      - cache.t2.small
      - cache.t2.medium
      - cache.t2.large
      - cache.m5.large
      - cache.m5.xlarge
      - cache.m5.2xlarge
      - cache.r5.large
      - cache.r5.xlarge
      - cache.r5.2xlarge
      - cache.r5.4xlarge
      - cache.r5.8xlarge
    ConstraintDescription: Must be a valid ElasticCache instance type.
  DbStorageQuota:
    Description: Database disk size
    Type: Number
    Default: 50
  TaskExecutionRoleArn:
    Description: 'Shared task execution role'
    Type: String
  ServiceScalingRole:
    Description: 'Role used for ECS service autoscaling'
    Type: String
  ServiceSchedulingRole:
    Description: 'Role used for ECS service scheduling'
    Type: String
  ShareScheduleTaskRole:
    Description: 'Role used for ECS cron job'
    Type: String
    Default: ''

Conditions:
  HasDbSnapshot: !Not 
    - !Equals [!Ref DbSnapshot, '']

Resources:
  Route53:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Sub ${HostedZoneName}.
      Comment: Hostname
      Name: !Sub ${Subdomain}.${HostedZoneName}.
      Type: A
      AliasTarget:
        DNSName: !Ref GatewayDnsName
        HostedZoneId: !Ref GatewayCanonicalZoneId

  BackgroundTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      TaskRoleArn: !GetAtt WebRole.Arn
      Cpu: !Ref CpuReservation
      Memory: !Ref MemoryReservation
      ContainerDefinitions:
        - Command: [scheduler]
          Name: redash-workers
          Essential: 'true'
          Image: !Ref RedashContainerMain
          Environment:
            - Name: PYTHONUNBUFFERED
              Value: 0
            - Name: REDASH_LOG_LEVEL
              Value: INFO
            - Name: REDASH_REDIS_URL
              Value: !Sub 'redis://${RedisCluster.PrimaryEndPoint.Address}:${RedisCluster.PrimaryEndPoint.Port}/0'
            - Name: POSTGRES_PASSWORD
              Value: !Ref DbPassword
            - Name: QUEUES
              Value: 'queries,scheduled_queries,celery,schemas'
            - Name: WORKERS_COUNT
              Value: 2
            - Name: REDASH_DATABASE_URL
              Value: !Sub postgresql://${DbUsername}:${DbPassword}@${Database.Endpoint.Address}/postgres
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LxDockerLog
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'AWS::StackName'
        # Hacky way to run the db init / migration
        # We essentially rely on Essential: 'false' to have the migration ran
        # everytime a background process is spun up.
        - Command: [create_db]
          Name: redash-db-init
          Essential: 'false'
          Image: !Ref RedashContainerMain
          Environment:
            - Name: PYTHONUNBUFFERED
              Value: 0
            - Name: REDASH_LOG_LEVEL
              Value: INFO
            - Name: REDASH_REDIS_URL
              Value: !Sub 'redis://${RedisCluster.PrimaryEndPoint.Address}:${RedisCluster.PrimaryEndPoint.Port}/0'
            - Name: REDASH_COOKIE_SECRET
              Value: !Select [2, !Split ["/", !Ref 'AWS::StackId']]
              # this uses stack id's random guid suffix as the cookie secret
            - Name: REDASH_DATABASE_URL
              Value: !Sub postgresql://${DbUsername}:${DbPassword}@${Database.Endpoint.Address}/postgres
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LxDockerLog
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'AWS::StackName'
  BackgroundService:
    Type: 'AWS::ECS::Service'
    DependsOn: AlbListenerRule
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      # Need to initialise with 1 first.
      TaskDefinition: !Ref BackgroundTask
  
  WebTaskDef:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      TaskRoleArn: !GetAtt WebRole.Arn
      Cpu: !Ref CpuReservation
      Memory: !Ref MemoryReservation
      ContainerDefinitions:
        - Name: redash-nginx
          Essential: 'true'
          Image: !Ref RedashContainerNginx
          PortMappings:
            - ContainerPort: 80
          Links: ['redash-web:redash']
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LxDockerLog
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'AWS::StackName'
        - Command: [server]
          Name: redash-web
          Essential: 'true'
          Image: !Ref RedashContainerMain
          Environment:
            - Name: PYTHONUNBUFFERED
              Value: 0
            - Name: REDASH_LOG_LEVEL
              Value: INFO
            - Name: REDASH_REDIS_URL
              Value: !Sub 'redis://${RedisCluster.PrimaryEndPoint.Address}:${RedisCluster.PrimaryEndPoint.Port}/0'
            - Name: POSTGRES_PASSWORD
              Value: !Ref DbPassword
            - Name: REDASH_COOKIE_SECRET
              Value: !Select [2, !Split ["/", !Ref 'AWS::StackId']]
              # this uses stack id's random guid suffix as the cookie secret
            - Name: REDASH_DATABASE_URL
              Value: !Sub postgresql://${DbUsername}:${DbPassword}@${Database.Endpoint.Address}/postgres
          PortMappings:
            - ContainerPort: 5000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LxDockerLog
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'AWS::StackName'
  WebService:
    Type: 'AWS::ECS::Service'
    DependsOn: AlbListenerRule
    Properties:
      Cluster: !Ref EcsCluster
      Role: !Ref ServiceSchedulingRole
      LoadBalancers:
        - ContainerName: redash-nginx
          ContainerPort: 80
          TargetGroupArn: !Ref AlbTargetGroup
      DesiredCount: 2
      # Need to initialise with 1 first.
      TaskDefinition: !Ref WebTaskDef
  AlbListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup
      Conditions:
        - Field: host-header
          Values: [!Sub '${Subdomain}.${HostedZoneName}']
      ListenerArn: !Ref HttpListener
      Priority: !Ref ListenerPriority
  AlbTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: '60'
      HealthCheckPath: '/ping'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: '30'
      HealthyThresholdCount: 10
      Port: 3000
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: !Ref DeregistrationDelay
  Route53:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Sub '${HostedZoneName}.'
      Comment: Hostname
      Name: !Sub '${Subdomain}.${HostedZoneName}.'
      Type: A
      AliasTarget:
        DNSName: !Ref GatewayDnsName
        HostedZoneId: !Ref GatewayCanonicalZoneId

  WebRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /analytics/metabase/
      ManagedPolicyArns:
        - !Ref CwlPolicy
      #Policies:
        #- PolicyName: root
        #  PolicyDocument:
        #    Version: 2012-10-17
        #    Statement:
              #- Effect: Allow
              #  Action:
              #    - 'ec2:DescribeInstances'
              #    - 'cloudwatch:Describe*'
              #    - 'cloudwatch:Get*'
              #    - 'cloudwatch:List*'
              #  Resource: '*'

  Database:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      VPCSecurityGroups:
        - !Ref DatabaseSg
      AllocatedStorage: !Ref DbStorageQuota
      DBInstanceClass: !Ref DbInstanceType
      DBParameterGroupName: !Ref DbParamGroup
      DBName: postgres
      Engine: postgres
      EngineVersion: 9.6.10
      MasterUsername: !Ref DbUsername
      MasterUserPassword: !Ref DbPassword
      DBSnapshotIdentifier: !If 
        - HasDbSnapshot
        - !Ref DbSnapshot
        - !Ref 'AWS::NoValue'
      DBSubnetGroupName: !Ref DbSubnetGroup
      Tags:
        - Key: Name
          Value: Database
      StorageType: gp2
      MultiAZ: 'false'
    DeletionPolicy: Snapshot
  DbParamGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: Redash Database Parameters
      Family: postgres9.6
      Parameters: {}

  RedisCluster:
    Type: 'AWS::ElastiCache::ReplicationGroup'
    Properties:
      AutoMinorVersionUpgrade: 'false'
      CacheNodeType: !Ref RedisInstanceType
      CacheParameterGroupName: !Ref RedisParameters
      NumCacheClusters: 2
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      Engine: redis
      EngineVersion: 3.2.4
      AutomaticFailoverEnabled: true
      ReplicationGroupDescription: !Ref AWS::StackName
      SecurityGroupIds:
        - !Ref DatabaseSg
  RedisParameters:
    Type: 'AWS::ElastiCache::ParameterGroup'
    Properties:
      CacheParameterGroupFamily: redis3.2
      Description: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '''s Redis ephemeral server parameters. These are per-stack.'
      Properties:
        maxmemory-policy: allkeys-lru

Outputs:
  AdminPanel:
    Value: !Sub http://${Subdomain}.${HostedZoneName}/
    Description: App Url
