AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Logstash for sending logs collected in analytics/logs-store template to
  Elasticsearch
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: SqsAutoScaling
        Parameters:
          - SqsScalingAdjustment
          - SqsScalingCooldown
          - SqsScaleUpThreshold
          - SqsScaleDownThreshold
          - SqsScaleTestPeriod
          - SqsScaleTestPeriodCount
  DefaultName: AwsLogstash
  Dependencies:
    - TemplatePath: networking/vpc
    - TemplatePath: networking/nat-subnets
      Parameters:
        VpcId: VpcId
      Outputs:
        Subnets: Subnets
      NestedDependency: networking/vpc
    - TemplatePath: analytics/logs-store
      Resources:
        LogStream: LogStream
        VpcTrafficLogGroupName: VpcTrafficLog
        CloudTrailLogGroupName: GlobalCloudTrailLog
        LinuxDockerLogGroupName: LxDockerLog
        LinuxSysLogGroupName: LxSysLog
        LinuxAuthLogGroupName: LxAuthLog
        BillingLogGroupName: BillingLog
        RawLogBucketName: Raw
        RawLogSns: RawBucketNotification
        AccessS3LogBucketName: AccessS3Log
        AccessS3LogSns: AccessS3LogBucketNotification
        AccessCfLogBucketName: AccessCfLog
        AccessCfLogSns: AccessCfLogBucketNotification
        BillingLogSns: BillingNotification
        CwlPolicy: LinuxLogPolicy
      Outputs:
        CwlDockerParams: DockerCwlParams
    - TemplatePath: datastore/elasticsearch
      Outputs:
        EsHost: EsElb
Parameters:
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: String
    Default: ''
  LogstashNodeType:
    Description: >-
      Logstash EC2 instance type. t3.nano should only be used for development
      purpose.
    Type: String
    Default: m5.large
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.8xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  BcUbuntuBaseAmiId:
    Description: AMI to use
    Type: 'AWS::EC2::Image::Id'
  VpcId:
    Description: VPCid associated with the subnets.
    Type: 'AWS::EC2::VPC::Id'
  Subnets:
    Description: Subnet to run HA web cluster on.
    Type: 'List<AWS::EC2::Subnet::Id>'
  LogStream:
    Description: Name of VPC traffic log group.
    Type: String
  VpcTrafficLogGroupName:
    Description: Name of VPC traffic log group.
    Type: String
  CloudTrailLogGroupName:
    Description: Name of VPC traffic log group.
    Type: String
  LinuxDockerLogGroupName:
    Description: Name of VPC traffic log group.
    Type: String
  LinuxSysLogGroupName:
    Description: Name of VPC traffic log group.
    Type: String
  LinuxAuthLogGroupName:
    Description: Name of VPC traffic log group.
    Type: String
  BillingLogGroupName:
    Description: Name of VPC traffic log group.
    Type: String    
  EsHost:
    Description: Hostname of Elasticsearch
    Type: String
  RawLogBucketName:
    Description: Hostname of Elasticsearch
    Type: String
  RawLogSns:
    Description: Hostname of Elasticsearch
    Type: String
  AccessS3LogBucketName:
    Description: Hostname of Elasticsearch
    Type: String
  AccessS3LogSns:
    Description: Hostname of Elasticsearch
    Type: String
  AccessCfLogBucketName:
    Description: Hostname of Elasticsearch
    Type: String
  AccessCfLogSns:
    Description: Hostname of Elasticsearch
    Type: String
  BillingLogSns:
    Description: Hostname of Elasticsearch
    Type: String    
  LogstashDocker:
    Description: Name of cluster. This is used for discovery.
    Type: String
    Default: 'bitclouded/ls-aws-kinesis:3-2'
  LogstashSqsDocker:
    Description: Name of cluster. This is used for discovery.
    Type: String
    Default: 'bitclouded/ls-aws-sqs3:10-1'
  ContainerAwsUtil:
    Description: Container image for awscli and cfn-signal
    Type: String
    Default: 'bitclouded/aws-util:2-1'
  CwlDockerParams:
    Description: Docker log driver params
    Type: String
  CwlPolicy:
    Description: Managed policy for linux logging.
    Type: String
  
  # SQS Processing Autoscaling
  SqsScalingAdjustment:
    Description: Number of servers to scale up and down for sqs processing.
    Type: Number
    Default: 1
  SqsScalingCooldown:
    Description: Number of minutes to wait before auto scaling again.
    Type: Number
    Default: 15
  SqsScaleUpThreshold:
    Description: Threshold for number of items in the queue for scale up.
    Type: Number
    Default: 40
  SqsScaleDownThreshold:
    Description: Threshold for number of items in the queue for scale up.
    Type: Number
    Default: 20
  SqsScaleTestPeriod:
    Description: Period to test for sqs scaling
    Type: Number
    Default: 180
  SqsScaleTestPeriodCount:
    Description: Number of periods to test for sqs scaling
    Type: Number
    Default: 2
  
Conditions:
  HasNoKeypair: !Equals 
    - !Ref KeyPairName
    - ''
Resources:
  # First section, processing the logs from the kinesis stream.
  LogStreamKclLeasesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref 'AWS::StackName'
      AttributeDefinitions:
        - AttributeName: leaseKey
          AttributeType: S
      KeySchema:
        - AttributeName: leaseKey
          KeyType: HASH
  LogstashAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LogstashLc
      MinSize: '1'
      MaxSize: '5'
      Tags:
        - Key: Name
          Value: Logstash Kinesis
          PropagateAtLaunch: 'True'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        WaitOnResourceSignals: 'true'
        PauseTime: PT10M
  LogstashLc:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      InstanceType: !Ref LogstashNodeType
      ImageId: !Ref BcUbuntuBaseAmiId
      KeyName: !If 
        - HasNoKeypair
        - !Ref 'AWS::NoValue'
        - !Ref KeyPairName
      SecurityGroups:
        - !Ref LogstashSg
      IamInstanceProfile: !Ref LogstashInstanceProfile
      UserData: !Base64 
        'Fn::Sub': |
          #!/bin/bash
          docker run -d --name logstash-kinesis --restart=always \
            -e KINESIS=${LogStream} \
            -e DDB_CHECKPOINT=${AWS::StackName} \
            -e ES_HOST=${EsHost} \
            -e VPC_LOG=${VpcTrafficLogGroupName} \
            -e CLOUDTRAIL=${CloudTrailLogGroupName} \
            -e DOCKER_LOG=${LinuxDockerLogGroupName} \
            -e SYSLOG=${LinuxSysLogGroupName} \
            -e AUTHLOG=${LinuxAuthLogGroupName} \
            ${LogstashDocker}
          docker run -t --rm ${ContainerAwsUtil} cfn-signal -e $? --stack ${AWS::StackName} --resource LogstashAsg --region ${AWS::Region}
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  LogstashInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /analytics/logstash/
      Roles:
        - !Ref LogstashRole
  LogstashRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /analytics/logstash/
      ManagedPolicyArns:
        - !Ref CwlPolicy
  LogstashRolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: LogstashKinesisAccessPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'dynamodb:*'
            Resource: !Join 
              - ''
              - - 'arn:aws:dynamodb:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':table/'
                - !Ref LogStreamKclLeasesTable
          - Effect: Allow
            Action:
              - 'kinesis:Get*'
              - 'kinesis:List*'
              - 'kinesis:Describe*'
            Resource: !Join 
              - ''
              - - 'arn:aws:kinesis:*:'
                - !Ref 'AWS::AccountId'
                - ':stream/'
                - !Ref LogStream
      Roles:
        - !Ref LogstashRole

  # SQS Processing
  RawSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt 
        - LogQueue
        - Arn
      Protocol: sqs
      TopicArn: !Ref RawLogSns
  S3Subscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt 
        - LogQueue
        - Arn
      Protocol: sqs
      TopicArn: !Ref AccessS3LogSns
  CfSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt 
        - LogQueue
        - Arn
      Protocol: sqs
      TopicArn: !Ref AccessCfLogSns
  BillingSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt 
        - LogQueue
        - Arn
      Protocol: sqs
      TopicArn: !Ref BillingLogSns
  LogQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Join 
        - ''
        - - !Ref 'AWS::StackName'
      ReceiveMessageWaitTimeSeconds: '20'
      VisibilityTimeout: 300
  LogQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Id: LogQueuePolicy
        Statement:
          - Sid: RawLog
            Effect: Allow
            Principal: '*'
            Action: ['sqs:SendMessage']
            Resource: '*'
            Condition:
              ArnLike:
                'aws:SourceArn': !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*'
      Queues:
        - !Ref LogQueue
  LogstashSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for logstash nodes.
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
          FromPort: '0'
          ToPort: '65535'
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: Ls Nodes
  LogstashSqsAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LogstashSqsLc
      MinSize: '1'
      MaxSize: '20'
      Tags:
        - Key: Name
          Value: Logstash Sqs
          PropagateAtLaunch: 'True'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        WaitOnResourceSignals: 'true'
        PauseTime: PT10M
  LogstashSqsLc:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      InstanceType: !Ref LogstashNodeType
      ImageId: !Ref BcUbuntuBaseAmiId
      KeyName: !If 
        - HasNoKeypair
        - !Ref 'AWS::NoValue'
        - !Ref KeyPairName
      SecurityGroups:
        - !Ref LogstashSg
      IamInstanceProfile: !Ref LogstashSqsInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
      UserData: !Base64 
        'Fn::Sub': |
          #!/bin/bash
          docker run --name logstash-sqs3 -d --restart=always \
            -e SQS=${LogQueue.QueueName} \
            -e ES_HOST=${EsHost} \
            -e RAW_BUCKET=${RawLogBucketName} \
            -e S3_BUCKET=${AccessS3LogBucketName} \
            -e CF_BUCKET=${AccessCfLogBucketName} \
            -e BILL_BUCKET=${BillingLogGroupName} \
            ${LogstashSqsDocker}
          docker run -t --rm ${ContainerAwsUtil} cfn-signal -e $? --stack ${AWS::StackName} --resource LogstashSqsAsg --region ${AWS::Region}
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  LogstashSqsInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /analytics/logstash/
      Roles:
        - !Ref LogstashSqsRole
  LogstashSqsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /analytics/logstash/
      ManagedPolicyArns:
        - !Ref CwlPolicy
  LogstashSqsRolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: LogstashSqsPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sqs:*'
            Resource:
              - !GetAtt 
                - LogQueue
                - Arn
          - Effect: Allow
            Action:
              - 's3:Get*'
            Resource: '*'
      Roles:
        - !Ref LogstashSqsRole
  # SQS Processor Autoscaling
  SqsProcessingScaleUpPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref "LogstashSqsAsg"
      Cooldown: !Ref SqsScalingCooldown
      ScalingAdjustment: !Ref SqsScalingAdjustment
  SqsProcessingScaleDownPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref "LogstashSqsAsg"
      Cooldown: !Ref SqsScalingCooldown
      ScalingAdjustment: !Ref SqsScalingAdjustment
  SqsProcessingCapacityAlarmLow:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: !Sub |
        Scale-down if cpu reservation < ${SqsScaleUpThreshold}% for ${SqsScaleTestPeriodCount} * ${SqsScaleTestPeriod} seconds
      MetricName: "ApproximateNumberOfMessagesVisible"
      Namespace: "AWS/SQS"
      Statistic: "Average"
      Period: !Ref SqsScaleTestPeriod
      EvaluationPeriods: !Ref SqsScaleTestPeriodCount
      Threshold: !Ref SqsScaleUpThreshold
      AlarmActions: [!Ref SqsProcessingScaleUpPolicy]
      Dimensions:
        - Name: "QueueName"
          Value: !GetAtt LogQueue.QueueName
      ComparisonOperator: "GreaterThanThreshold"
  SqsProcessingCapacityAlarmHigh:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: !Sub |
        Scale-down if cpu reservation < ${SqsScaleDownThreshold}% for ${SqsScaleTestPeriodCount} * ${SqsScaleTestPeriod} seconds
      MetricName: "ApproximateNumberOfMessagesVisible"
      Namespace: "AWS/SQS"
      Statistic: "Average"
      Period: !Ref SqsScaleTestPeriod
      EvaluationPeriods: !Ref SqsScaleTestPeriodCount
      Threshold: !Ref SqsScaleDownThreshold
      AlarmActions: [!Ref SqsProcessingScaleDownPolicy]
      Dimensions: 
        - Name: "QueueName"
          Value: !GetAtt LogQueue.QueueName
      ComparisonOperator: "LessThanThreshold"
  # /SQS Processing

Outputs:
  ViewAvailableIndex:
    Value: !Sub 'http://${EsHost}:9200/_plugin/kopf'
    Description: View list of indexes that holds the AWS logs.
