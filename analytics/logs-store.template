AWSTemplateFormatVersion: 2010-09-09
Description: Buckets to hold aws logs.
Parameters:
  ConfigDeliveryFrequency:
    Description: ''
    Default: Three_Hours
    Type: String
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  CwlUbuntuAgentDocker:
    Description: Name tag of log shipping agent container.
    Type: String
    Default: 'bitclouded/aws-cwl-agent:4.1'
Metadata:
  DefaultName: LogStore
Resources:
  CriticalEvents:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: Infrastructure Critical Events
  WarningEvents:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: Infrastructure Warning Events

  ConfigRecorder:
    Type: 'AWS::Config::ConfigurationRecorder'
    Properties:
      RecordingGroup:
        AllSupported: 'True'
        IncludeGlobalResourceTypes: 'True'
      RoleARN: !GetAtt 
        - ConfigRecorderRole
        - Arn
  ConfigDeliveryChannel:
    Type: 'AWS::Config::DeliveryChannel'
    DependsOn: RawBucketPolicy
    Properties:
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: !Ref ConfigDeliveryFrequency
      S3BucketName: !Ref Raw
  ConfigRecorderRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /bit-clouded/analytics/
      Policies:
        - PolicyName: default
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref Raw
                      - /AWSLogs/*
                Condition:
                  StringLike:
                    's3:x-amz-acl': bucket-owner-full-control
              - Effect: Allow
                Action:
                  - 's3:GetBucketAcl'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref Raw
                    - /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSConfigRole'
  AccessS3Log:
    Type: 'AWS::S3::Bucket'
    DependsOn: AccessS3LogBucketSnsPolicy
    Properties:
      AccessControl: LogDeliveryWrite
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref AccessS3LogBucketNotification
            Event: 's3:ObjectCreated:*'
    DeletionPolicy: Retain
  AccessS3LogBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref AccessS3Log
      PolicyDocument:
        Statement:
          - Action:
              - 's3:DeleteObject'
              - 's3:DeleteObjectVersion'
            Effect: Deny
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref AccessS3Log
                - /*
            Principal: '*'
  AccessCfLog:
    Type: 'AWS::S3::Bucket'
    DependsOn: AccessCfLogBucketSnsPolicy
    Properties:
      AccessControl: LogDeliveryWrite
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessS3Log
        LogFilePrefix: !Join 
          - ''
          - - !Ref 'AWS::StackName'
            - '-AccessCfLog/'
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref AccessCfLogBucketNotification
            Event: 's3:ObjectCreated:*'
    DeletionPolicy: Retain
  AccessCfLogBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref AccessCfLog
      PolicyDocument:
        Statement:
          - Action:
              - 's3:DeleteObject'
              - 's3:DeleteObjectVersion'
            Effect: Deny
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref AccessCfLog
                - /*
            Principal: '*'
  Raw:
    Type: 'AWS::S3::Bucket'
    DependsOn: RawBucketSnsPolicy
    Properties:
      AccessControl: Private
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessS3Log
        LogFilePrefix: !Join 
          - ''
          - - !Ref 'AWS::StackName'
            - '-Raw/'
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref RawBucketNotification
            Event: 's3:ObjectCreated:*'
    DeletionPolicy: Retain
  RawBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Raw
      PolicyDocument:
        Statement:
          - Sid: AwsConfigBucketPermissionsCheck
            Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action: 's3:GetBucketAcl'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Raw
          - Sid: AWSConfigBucketDelivery
            Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action: 's3:PutObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Raw
                - /AWSLogs/*
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
          - Action:
              - 's3:DeleteObject'
              - 's3:DeleteObjectVersion'
            Effect: Deny
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Raw
                - /*
            Principal: '*'
          - Action:
              - 's3:GetBucketAcl'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Raw
            Principal:
              AWS:
                - 'arn:aws:iam::216624486486:root'
                - 'arn:aws:iam::903692715234:root'
                - 'arn:aws:iam::284668455005:root'
                - 'arn:aws:iam::035351147821:root'
                - 'arn:aws:iam::859597730677:root'
                - 'arn:aws:iam::814480443879:root'
                - 'arn:aws:iam::086441151436:root'
                - 'arn:aws:iam::388731089494:root'
                - 'arn:aws:iam::113285607260:root'
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Raw
                - /AWSLogs/*
            Principal:
              AWS:
                - 'arn:aws:iam::127311923021:root'
                - 'arn:aws:iam::027434742980:root'
                - 'arn:aws:iam::797873946194:root'
                - 'arn:aws:iam::156460612806:root'
                - 'arn:aws:iam::054676820928:root'
                - 'arn:aws:iam::582318560864:root'
                - 'arn:aws:iam::114774131450:root'
                - 'arn:aws:iam::783225319266:root'
                - 'arn:aws:iam::507241528517:root'
                - 'arn:aws:iam::216624486486:root'
                - 'arn:aws:iam::903692715234:root'
                - 'arn:aws:iam::284668455005:root'
                - 'arn:aws:iam::035351147821:root'
                - 'arn:aws:iam::859597730677:root'
                - 'arn:aws:iam::814480443879:root'
                - 'arn:aws:iam::086441151436:root'
                - 'arn:aws:iam::388731089494:root'
                - 'arn:aws:iam::113285607260:root'
          - Action:
              - 's3:GetBucketAcl'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Raw
            Principal:
              Service: cloudtrail.amazonaws.com
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Raw
                - /AWSLogs/*
            Principal:
              Service: cloudtrail.amazonaws.com
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Raw
                - /AWSLogs/*
            Principal:
              AWS:
                - '127311923021'
                - '033677994240'
                - '027434742980'
                - '797873946194'
                - '985666609251'
                - '156460612806'
                - '054676820928'
                - '652711504416'
                - '582318560864'
                - '600734575887'
                - '114774131450'
                - '783225319266'
                - '718504428378'
                - '507241528517'

  RawBucketNotification:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: CloudTrail and ELB Bucket Event Notification
  RawBucketSnsPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: raw-log-file-created-sns
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'SNS:Publish'
            Resource:
              - !Ref RawBucketNotification
            Condition:
              ArnLike:
                'aws:SourceArn': !Join 
                  - ''
                  - - 'arn:aws:s3:*:*:*'
      Topics:
        - !Ref RawBucketNotification
  AccessS3LogBucketNotification:
    Type: 'AWS::SNS::Topic'
    DependsOn: LogStreamRolePolicy
    Properties:
      DisplayName: S3 and CloudFront Access Log Bucket Event Notification
  AccessS3LogBucketSnsPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: s3-access-file-created-sns
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'SNS:Publish'
            Resource:
              - !Ref AccessS3LogBucketNotification
            Condition:
              ArnLike:
                'aws:SourceArn': !Join 
                  - ''
                  - - 'arn:aws:s3:*:*:*'
      Topics:
        - !Ref AccessS3LogBucketNotification
  AccessCfLogBucketNotification:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: S3 and CloudFront Access Log Bucket Event Notification
  AccessCfLogBucketSnsPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: s3-access-file-created-sns
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'SNS:Publish'
            Resource:
              - !Ref AccessCfLogBucketNotification
            Condition:
              ArnLike:
                'aws:SourceArn': !Join 
                  - ''
                  - - 'arn:aws:s3:*:*:*'
      Topics:
        - !Ref AccessCfLogBucketNotification
  GlobalCloudTrailLog:
    DependsOn:
      - LogStream
      - LogStreamRole
      - LogStreamRolePolicy
      - AccessS3LogBucketPolicy
    Type: 'AWS::Logs::LogGroup'
    Properties: {}
  GlobalCloudTrail:
    Type: 'AWS::CloudTrail::Trail'
    DependsOn: RawBucketPolicy
    Properties:
      CloudWatchLogsLogGroupArn: !GetAtt 
        - GlobalCloudTrailLog
        - Arn
      CloudWatchLogsRoleArn: !GetAtt 
        - GlobalCloudTrailLogRole
        - Arn
      EnableLogFileValidation: 'true'
      IncludeGlobalServiceEvents: 'true'
      IsLogging: 'true'
      IsMultiRegionTrail: 'true'
      S3BucketName: !Ref Raw
      SnsTopicName: !Ref GlobalCloudTrailNotification
  GlobalCloudTrailNotification:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: CloudTrail notification
      TopicName: !Join 
        - ''
        - - cloudtrail-event-
          - !Ref GlobalCloudTrailLog
  GlobalCloudTrailNotificationPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Sid: Statement1
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'SNS:GetTopicAttributes'
              - 'SNS:SetTopicAttributes'
              - 'SNS:AddPermission'
              - 'SNS:RemovePermission'
              - 'SNS:DeleteTopic'
              - 'SNS:Subscribe'
              - 'SNS:ListSubscriptionsByTopic'
              - 'SNS:Publish'
              - 'SNS:Receive'
            Resource: !Ref GlobalCloudTrailNotification
            Condition:
              StringEquals:
                'AWS:SourceOwner': '380048663093'
          - Sid: Statement2
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 'SNS:Publish'
            Resource: !Ref GlobalCloudTrailNotification
      Topics:
        - !Ref GlobalCloudTrailNotification
  GlobalCloudTrailLogRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /analytics/log-store/
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - '*'
                Resource: !GetAtt 
                  - GlobalCloudTrailLog
                  - Arn
  GlobalCloudTrailLogSub:
    DependsOn:
      - GlobalCloudTrailLog
    Type: 'AWS::Logs::SubscriptionFilter'
    Properties:
      DestinationArn: !GetAtt 
        - LogStream
        - Arn
      FilterPattern: ''
      LogGroupName: !Ref GlobalCloudTrailLog
      RoleArn: !GetAtt 
        - LogStreamRole
        - Arn
  VpcTrafficLog:
    DependsOn:
      - LogStream
      - LogStreamRole
      - LogStreamRolePolicy
      - AccessS3LogBucketPolicy
    Type: 'AWS::Logs::LogGroup'
    Properties: {}
  VpcTrafficLogSub:
    DependsOn:
      - VpcTrafficLog
    Type: 'AWS::Logs::SubscriptionFilter'
    Properties:
      DestinationArn: !GetAtt 
        - LogStream
        - Arn
      FilterPattern: >-
        [version, account_id, interface_id, srcaddr, dstaddr, srcport, dstport,
        protocol, packets, bytes, start, end, action, log_status]
      LogGroupName: !Ref VpcTrafficLog
      RoleArn: !GetAtt 
        - LogStreamRole
        - Arn
  VpcTrafficLogRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /analytics/log-store/
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource: !GetAtt 
                  - VpcTrafficLog
                  - Arn
  LxSysLog:
    DependsOn:
      - LogStream
      - LogStreamRole
      - LogStreamRolePolicy
      - AccessS3LogBucketPolicy
    Type: 'AWS::Logs::LogGroup'
    Properties: {}
  LxSysLogLogSub:
    DependsOn:
      - LxSysLog
    Type: 'AWS::Logs::SubscriptionFilter'
    Properties:
      DestinationArn: !GetAtt 
        - LogStream
        - Arn
      FilterPattern: ''
      LogGroupName: !Ref LxSysLog
      RoleArn: !GetAtt 
        - LogStreamRole
        - Arn
  LxAuthLog:
    DependsOn:
      - LogStream
      - LogStreamRole
      - LogStreamRolePolicy
      - AccessS3LogBucketPolicy
    Type: 'AWS::Logs::LogGroup'
    Properties: {}
  LxAuthLogSub:
    DependsOn:
      - LxAuthLog
    Type: 'AWS::Logs::SubscriptionFilter'
    Properties:
      DestinationArn: !GetAtt 
        - LogStream
        - Arn
      FilterPattern: ''
      LogGroupName: !Ref LxAuthLog
      RoleArn: !GetAtt 
        - LogStreamRole
        - Arn
  LxDockerLog:
    DependsOn:
      - LogStream
      - LogStreamRole
      - LogStreamRolePolicy
      - AccessS3LogBucketPolicy
    Type: 'AWS::Logs::LogGroup'
    Properties: {}
  LxDockerLogSub:
    DependsOn:
      - LxDockerLog
    Type: 'AWS::Logs::SubscriptionFilter'
    Properties:
      DestinationArn: !GetAtt 
        - LogStream
        - Arn
      FilterPattern: ''
      LogGroupName: !Ref LxDockerLog
      RoleArn: !GetAtt 
        - LogStreamRole
        - Arn
  BaseEc2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /analytics/log-store/
      ManagedPolicyArns: [!Ref LinuxLogPolicy]
  BaseEc2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /analytics/log-store/
      Roles: [!Ref BaseEc2Role]
  LinuxLogPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Path: /analytics/log-store/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: SsmManagement
            Effect: Allow
            Action:
              - 'cloudwatch:PutMetricData'
              - 'ec2:DescribeTags'
              - 'ec2:DescribeInstanceStatus'
              - 'ssm:DescribeAssociation'
              - 'ssm:GetDeployablePatchSnapshotForInstance'
              - 'ssm:GetDocument'
              - 'ssm:GetParameters'
              - 'ssm:ListAssociations'
              - 'ssm:ListInstanceAssociations'
              - 'ssm:PutInventory'
              - 'ssm:UpdateAssociationStatus'
              - 'ssm:UpdateInstanceAssociationStatus'
              - 'ssm:UpdateInstanceInformation'
              - 'ec2messages:AcknowledgeMessage'
              - 'ec2messages:DeleteMessage'
              - 'ec2messages:FailMessage'
              - 'ec2messages:GetEndpoint'
              - 'ec2messages:GetMessages'
              - 'ec2messages:SendReply'
            Resource: ['*']
          - Sid: CloudwatchMetrics
            Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogGroups'
              - 'logs:DescribeLogStreams'
            Resource:
              - !GetAtt LxSysLog.Arn
              - !GetAtt LxAuthLog.Arn
              - !GetAtt LxDockerLog.Arn
          - Sid: SessionManager
            Effect: Allow
            Action:
              - 'ssmmessages:CreateControlChannel'
              - 'ssmmessages:CreateDataChannel'
              - 'ssmmessages:OpenControlChannel'
              - 'ssmmessages:OpenDataChannel'
              - 's3:GetEncryptionConfiguration'
            Resource: ['*']
  LogStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      ShardCount: 1
  LogStreamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action: 'sts:AssumeRole'
  LogStreamRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: KinesisPutRecordPolicy
      Roles:
        - !Ref LogStreamRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'kinesis:PutRecord'
            Resource: !GetAtt 
              - LogStream
              - Arn
          - Effect: Allow
            Action: 'iam:PassRole'
            Resource: !Join 
              - ''
              - - 'arn:aws:iam::'
                - !Ref 'AWS::AccountId'
                - ':role/'
                - !Ref LogStreamRole
  BillingLog:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: LogDeliveryWrite
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessS3Log
        LogFilePrefix: !Join 
          - ''
          - - !Ref 'AWS::StackName'
            - '-Billing/'
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref BillingNotification
            Event: 's3:ObjectCreated:*'
    DeletionPolicy: Retain
  BillingLogPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref BillingLog
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetBucketAcl'
              - 's3:GetBucketPolicy'
            Resource: !Sub 'arn:aws:s3:::${BillingLog}'
            Principal: 
              AWS:
                - 'arn:aws:iam::386209384616:root'
          - Effect: Allow
            Action:
              - 's3:PutObject'
            Principal: 
              AWS:
                - 'arn:aws:iam::386209384616:root'
            Resource: !Sub 'arn:aws:s3:::${BillingLog}/*'
          - Effect: Deny
            Action:
              - 's3:DeleteObject'
              - 's3:DeleteObjectVersion'            
            Resource: !Sub 'arn:aws:s3:::${BillingLog}/*'
            Principal: '*'  
  BillingNotification:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: Billing
  BillingNotificationPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Sid: Statement1            
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'SNS:Publish'
            Resource:
              - !Ref BillingNotification
      Topics:
        - !Ref BillingNotification                         
  LinuxMemoryAndLogShiping:
    Type: "AWS::SSM::Document"
    Properties: 
      DocumentType: Command
      Content: 
        schemaVersion: "2.0"
        description: "Send memory metrics to cloudwatch custom metrics. Send syslog and authlog to cloudwatch logs."
        mainSteps:
          - action: "aws:runShellScript"
            name: "LaunchLogAgent"
            inputs:
              runCommand: 
                - !Sub |
                  ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                  STACK_NAME=$(aws ec2 describe-tags \
                    --filters "Name=resource-id,Values=$ECID" "Name=key,Values=aws:cloudformation:stack-name" \
                    --region=${AWS::Region} --output=text | cut -f5)
                  docker run -d --restart=always \
                    -v /var/log:/var/log-host:ro \
                    --name cwlagent \
                    --log-opt awslogs-stream=$STACK_NAME/cwlagent/$ECID \
                    --log-opt awslogs-group=${LxDockerLog} \
                    --log-driver=awslogs \
                    -e SYSLOG=${LxSysLog} -e AUTHLOG=${LxAuthLog} \
                    ${CwlUbuntuAgentDocker}
                  docker run -d --restart=always --name cwlcron ${CwlUbuntuAgentDocker} cron
          - action: "aws:runShellScript"
            name: "InstallInspector"
            inputs:
              runCommand: 
                - !Sub |
                  wget https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install -O - | bash
  BcTemplatesAssociation:
    Type: "AWS::SSM::Association"
    Properties: 
      Name: !Ref LinuxMemoryAndLogShiping
      Targets:
        - Key: "tag:bc:template-name"
          Values:
            - analytics/aws-logstash
            - analytics/grafana
            - analytics/snowplow
            - datastore/elasticsearch
            - platforms/ecs-base
Outputs:
  LxDockerLogParams:
    Value: !Join 
      - ''
      - - '--log-driver=awslogs '
        - '--log-opt awslogs-group='
        - !Ref LxDockerLog
  DockerCwlParams:
    Value: !Join 
      - ''
      - - '-e SYSLOG='
        - !Ref LxSysLog
        - ' '
        - '-e AUTHLOG='
        - !Ref LxAuthLog
  FlowLogRoleArn:
    Value: !GetAtt 
      - VpcTrafficLogRole
      - Arn
