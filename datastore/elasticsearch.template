{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "A template to launch elasticsearch cluster.",

    "Metadata" : {
        "DefaultName" : "Elasticsearch",
        "Dependencies": [
            {
                "TemplatePath": "networking/elb-subnets",
                "Parameters": {
                    "VpcId": "VpcId"
                },
                "Outputs": {
                    "ElbSubnets": "ElbSubnets",
                    "ServerSubnets": "WebServerSubnets"
                }
            },
            {
                "TemplatePath": "analytics/logs-store",
                "Resources": {
                    "CwlPolicy": "LinuxLogPolicy"
                },
                "Outputs": {
                    "CwlLinuxParams": "LxDockerLogParams",
                    "CwlDockerParams": "DockerCwlParams"
                }
            }
        ]
    },

    "Parameters": {
        "KeyPairName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "String",
            "Default": ""
        },

        "KibanaInstanceType" : {
            "Description" : "WebServer EC2 instance type",
            "Type" : "String",
            "Default" : "t2.micro",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "t2.xlarge",
                "t2.2xlarge",
                "m3.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge"
            ],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },
        "GatewayNodeInstanceType" : {
            "Description" : "WebServer EC2 instance type",
            "Type" : "String",
            "Default" : "m3.medium",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m3.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge"
            ],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },
        "DataNodeInstanceType" : {
            "Description" : "WebServer EC2 instance type",
            "Type" : "String",
            "Default" : "m3.medium",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m3.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge"
            ],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },
        "MasterNodeInstanceType" : {
            "Description" : "WebServer EC2 instance type",
            "Type" : "String",
            "Default" : "t2.small",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m3.medium",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge"
            ],
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },
        "BcUbuntuBaseAmiId": {
            "Description": "Debian Jessie AMI",
            "Type": "AWS::EC2::Image::Id"
        },
        "EsDataDiskSize": {
            "Description": "Size of the SSD for the elasticsearch to write to.",
            "Default": "150",
            "Type": "Number",
            "MinValue": "50",
            "MaxValue": "1000"
        },

        "EsConfShard": {
            "Description": "Number of shards per index.",
            "Default": "5",
            "Type": "Number"
        },
        "EsConfReplica": {
            "Description": "Number of replicas.",
            "Default": "1",
            "Type": "Number"
        },
        "EsConfClusterName": {
            "Description": "Name of cluster. This is used for discovery.",
            "Type": "String",
            "Default": "EsCluster"
        },

        "VpcId": {
            "Description" : "VPCid associated with the subnets. [elb-subnets.parameters.VpcId]",
            "Type": "AWS::EC2::VPC::Id"
        },

        "ElbSubnets" : {
            "Description" : "VPCid associated with the subnets. [elb-subnets.outputs.ElbSubnets]",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "ServerSubnets" : {
            "Description" : "VPCid associated with the subnets. [elb-subnets.outputs.WebServerSubnets]",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },

        "EsFiveContainerName": {
            "Description": "Name of container to run elasticsearch.",
            "Type": "String",
            "Default": "bitclouded/elasticsearch-5.x:2.1"
        },
        "EsTwoContainerName": {
            "Description": "Name of container to run elasticsearch.",
            "Type": "String",
            "Default": "bitclouded/elasticsearch-2.x:1.1"
        },
        "EsVersion": {
            "Description": "Name of container to run elasticsearch.",
            "Type": "String",
            "Default": "2",
            "AllowedValues": ["2", "5"]
        },
        "KFiveContainerName": {
            "Description": "Name of container to run elasticsearch.",
            "Type": "String",
            "Default": "kibana:5.0.0"
        },
        "KFourContainerName": {
            "Description": "Name of container to run elasticsearch.",
            "Type": "String",
            "Default": "kibana:4.6.3"
        },
        "CwlUbuntuAgentDocker": {
            "Description": "Name of cluster. This is used for discovery.",
            "Type": "String",
            "Default": "bitclouded/aws-cwl-agent:4.1"
        },
        "CwlLinuxParams" : {
            "Description": "Environment variables for syslog and authlog cwl group names [logs-store.outputs.LxDockerLogParams]",
            "Type": "String"
        },
        "CwlDockerParams" : {
            "Description": "Docker log driver params [logs-store.outputs.DockerCwlParams]",
            "Type": "String"
        },
        "CwlPolicy" : {
            "Description": "Managed policy for linux logging. [logs-store.resources.LinuxLogPolicy]",
            "Type": "String"
        }
    },

    "Conditions" : {
        "IsVersionFive" : { "Fn::Equals": [
            {"Ref":"EsVersion"}, "5"
        ]},
        "HasNoKeypair" : { "Fn::Equals" : [{"Ref" : "KeyPairName"}, ""]}
    },

    "Mappings" : {
        "InstanceVariables" : {
            "t2.micro": { "ram" : "450" },
            "t2.small": { "ram" : "950" },
            "t2.medium": { "ram" : "1950" },
            "m3.medium": { "ram" : "1800" },
            "m4.large": { "ram" : "3600" },
            "m4.xlarge": { "ram" : "7000" },
            "m4.2xlarge": { "ram" : "14500" },
            "r3.large": { "ram" : "7500" },
            "r3.xlarge": { "ram" : "15000" },
            "r3.2xlarge": { "ram" : "30000" },
            "r3.4xlarge": { "ram" : "60000" },
            "r3.8xlarge": { "ram" : "120000" }
        }
    },

    "Resources" : {

        "EsDataNodeGroupOneLc" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "InstanceType" : { "Ref" : "DataNodeInstanceType" },
                "ImageId" : { "Ref" : "BcUbuntuBaseAmiId" },
                "KeyName" : {"Fn::If": [
                    "HasNoKeypair",
                    { "Ref": "AWS::NoValue" },
                    { "Ref": "KeyPairName" }
                ]},
                "AssociatePublicIpAddress": "false",
                "SecurityGroups": [
                    { "Ref" : "EsClusterNodeSg" }
                ],
                "IamInstanceProfile": { "Ref" : "EsDataNodeInstanceProfile" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",
                    "sysctl -w vm.max_map_count=262144\n",

					"umount /mnt/\n",
                    "mkfs -t ext4 /dev/xvdk\n",
					"mkdir /mnt/xvdk\n",
					"cp /etc/fstab /etc/fstab.bak && rm /etc/fstab\n",
					"cat /etc/fstab.bak | grep -v ^/dev/xvdk | tee /etc/fstab\n",
					"echo -e \"/dev/xvdk\\t/mnt/xvdk\\tauto\\tdefaults\\t0\\t2\" >> /etc/fstab\n",
					"mount -a\n",

                    "ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
                    "CWLA=cwlagent_$ECID\n",
                    "docker run -d --restart=always ",
                        "--name $CWLA --log-opt awslogs-stream=$CWLA ",
                        "-v /var/log:/var/log-host:ro ",
                        {"Ref":"CwlLinuxParams"}," ",
                        {"Ref":"CwlDockerParams"}," ",
                        {"Ref":"CwlUbuntuAgentDocker"},"\n",
                    "docker run -d --restart=always --name cwlcron ",
                        {"Ref":"CwlUbuntuAgentDocker"}," cron\n",

                    "ESDN=es-data_$ECID\n",
                    "docker run --restart=always -p 9200:9200 -p 9300:9300 -d ",
                        "-v /mnt/xvdk:/usr/share/elasticsearch/data ",
                        "-e ES_JAVA_OPTS=\"-Xms",{ "Fn::FindInMap": [ "InstanceVariables", { "Ref": "DataNodeInstanceType" }, "ram" ] },"m -Xmx",{ "Fn::FindInMap": [ "InstanceVariables", { "Ref": "DataNodeInstanceType" }, "ram" ] },"m\" ",
                        "--cap-add=IPC_LOCK --ulimit memlock=-1:-1 ",
                        "--name $ESDN --log-opt awslogs-stream=$ESDN ",
                        {"Ref":"CwlLinuxParams"}," ",
                        {"Fn::If": ["IsVersionFive",
                            {"Fn::Join":["", [
                                {"Ref":"EsFiveContainerName"},
                                    " -E bootstrap.memory_lock=true",
                                    " -E network.publish_host=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)",
                                    " -E cluster.name=",{"Ref":"EsConfClusterName"},
                                    " -E cloud.aws.region=",{"Ref":"AWS::Region"},
                                    " -E discovery.ec2.groups=",{"Ref":"EsClusterNodeSg"},
                                    " -E node.attr.rack_id=grp_one",
                                    " -E node.master=false",
                                    " -E node.data=true"
                            ]]},
                            {"Fn::Join":["", [
                                {"Ref":"EsTwoContainerName"},
                                    " --bootstrap.mlockall=true",
                                    " --index.number_of_replicas=1",
                                    " --index.number_of_shards=5",
                                    " --network.publish_host=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)",
                                    " --cluster.name=",{"Ref":"EsConfClusterName"},
                                    " --cloud.aws.region=",{"Ref":"AWS::Region"},
                                    " --discovery.ec2.groups=",{"Ref":"EsClusterNodeSg"},
                                    " --node.rack_id=grp_one",
                                    " --node.master=false",
                                    " --node.data=true"
                            ]]}
                        ]}
                ]]}},
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/xvda",
                        "Ebs" : { "VolumeSize" : "30", "VolumeType" : "gp2" }
                    },
                    {
                        "DeviceName" : "/dev/xvdk",
                        "Ebs" : { "VolumeSize" : {"Ref": "EsDataDiskSize"}, "VolumeType" : "gp2" }
                    }
                ]
            }
        },
        "EsDataNodeGroupOneAsg" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "VPCZoneIdentifier": [
                    {"Fn::Select":["0", { "Ref" : "ServerSubnets" }]}
                ],
                "AvailabilityZones" : [{ "Fn::Select": ["0",  { "Fn::GetAZs": "" }]}],
                "LaunchConfigurationName" : { "Ref" : "EsDataNodeGroupOneLc" },
                "MinSize" : "1",
                "MaxSize" : "10",
                "Tags" : [{"Key": "Name", "Value" : "Elasticsearch Cluster Data Node Grp One", "PropagateAtLaunch" : "True"}]
            }
        },
        "EsDataNodeGroupTwoLc" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "InstanceType" : { "Ref" : "DataNodeInstanceType" },
                "ImageId" : { "Ref" : "BcUbuntuBaseAmiId" },
                "KeyName" : {"Fn::If": [
                    "HasNoKeypair",
                    { "Ref": "AWS::NoValue" },
                    { "Ref": "KeyPairName" }
                ]},
                "AssociatePublicIpAddress": "false",
                "SecurityGroups": [
                    { "Ref" : "EsClusterNodeSg" }
                ],
                "IamInstanceProfile": { "Ref" : "EsDataNodeInstanceProfile" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",
                    "sysctl -w vm.max_map_count=262144\n",

					"umount /mnt/\n",
                    "mkfs -t ext4 /dev/xvdk\n",
					"mkdir /mnt/xvdk\n",
					"cp /etc/fstab /etc/fstab.bak && rm /etc/fstab\n",
					"cat /etc/fstab.bak | grep -v ^/dev/xvdk | tee /etc/fstab\n",
					"echo -e \"/dev/xvdk\\t/mnt/xvdk\\tauto\\tdefaults\\t0\\t2\" >> /etc/fstab\n",
					"mount -a\n",

                    "ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
                    "CWLA=cwlagent_$ECID\n",
                    "docker run -d --restart=always ",
                        "--name $CWLA --log-opt awslogs-stream=$CWLA ",
                        "-v /var/log:/var/log-host:ro ",
                        {"Ref":"CwlLinuxParams"}," ",
                        {"Ref":"CwlDockerParams"}," ",
                        {"Ref":"CwlUbuntuAgentDocker"},"\n",
                    "docker run -d --restart=always --name cwlcron ",
                        {"Ref":"CwlUbuntuAgentDocker"}," cron\n",

                    "ESDN=es-data_$ECID\n",
                    "docker run --restart=always -p 9200:9200 -p 9300:9300 -d ",
                        "-v /mnt/xvdk:/usr/share/elasticsearch/data ",
                        "-e ES_JAVA_OPTS=\"-Xms",{ "Fn::FindInMap": [ "InstanceVariables", { "Ref": "DataNodeInstanceType" }, "ram" ] },"m -Xmx",{ "Fn::FindInMap": [ "InstanceVariables", { "Ref": "DataNodeInstanceType" }, "ram" ] },"m\" ",
                        "--cap-add=IPC_LOCK --ulimit memlock=-1:-1 ",
                        "--name $ESDN --log-opt awslogs-stream=$ESDN ",
                        {"Ref":"CwlLinuxParams"}," ",
                        {"Fn::If": ["IsVersionFive",
                            {"Fn::Join":["", [
                                {"Ref":"EsFiveContainerName"},
                                    " -E bootstrap.memory_lock=true",
                                    " -E network.publish_host=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)",
                                    " -E cluster.name=",{"Ref":"EsConfClusterName"},
                                    " -E cloud.aws.region=",{"Ref":"AWS::Region"},
                                    " -E discovery.ec2.groups=",{"Ref":"EsClusterNodeSg"},
                                    " -E node.attr.rack_id=grp_two",
                                    " -E node.master=false",
                                    " -E node.data=true"
                            ]]},
                            {"Fn::Join":["", [
                                {"Ref":"EsTwoContainerName"},
                                    " --bootstrap.mlockall=true",
                                    " --index.number_of_replicas=1",
                                    " --index.number_of_shards=5",
                                    " --network.publish_host=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)",
                                    " --cluster.name=",{"Ref":"EsConfClusterName"},
                                    " --cloud.aws.region=",{"Ref":"AWS::Region"},
                                    " --discovery.ec2.groups=",{"Ref":"EsClusterNodeSg"},
                                    " --node.rack_id=grp_two",
                                    " --node.master=false",
                                    " --node.data=true"
                            ]]}
                        ]}
                ]]}},
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/xvda",
                        "Ebs" : { "VolumeSize" : "30", "VolumeType" : "gp2" }
                    },
                    {
                        "DeviceName" : "/dev/xvdk",
                        "Ebs" : { "VolumeSize" : {"Ref": "EsDataDiskSize"}, "VolumeType" : "gp2" }
                    }
                ]
            }
        },
        "EsDataNodeGroupTwoAsg" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "VPCZoneIdentifier": [
                    {"Fn::Select":["1", { "Ref" : "ServerSubnets" }]}
                ],
                "AvailabilityZones" : [{ "Fn::Select": ["1",  { "Fn::GetAZs": "" }]}],
                "LaunchConfigurationName" : { "Ref" : "EsDataNodeGroupTwoLc" },
                "MinSize" : "1",
                "MaxSize" : "10",
                "Tags" : [
                    {"Key": "Name", "Value" : "Elasticsearch Cluster Data Node Grp Two", "PropagateAtLaunch" : "True"}
                ]
            }
        },

        "EsMasterNodeLc" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "InstanceType" : { "Ref" : "MasterNodeInstanceType" },
                "ImageId" : { "Ref" : "BcUbuntuBaseAmiId" },
                "KeyName" : {"Fn::If": [
                    "HasNoKeypair",
                    { "Ref": "AWS::NoValue" },
                    { "Ref": "KeyPairName" }
                ]},
                "AssociatePublicIpAddress": "false",
                "SecurityGroups": [
                    { "Ref" : "EsClusterNodeSg" }
                ],
                "IamInstanceProfile": { "Ref" : "EsDataNodeInstanceProfile" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",
                    "mkdir /home/xvdk\n",
                    "sysctl -w vm.max_map_count=262144\n",

                    "ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
                    "CWLA=cwlagent_$ECID\n",
                    "docker run -d --restart=always ",
                        "--name $CWLA --log-opt awslogs-stream=$CWLA ",
                        "-v /var/log:/var/log-host:ro ",
                        {"Ref":"CwlLinuxParams"}," ",
                        {"Ref":"CwlDockerParams"}," ",
                        {"Ref":"CwlUbuntuAgentDocker"},"\n",
                    "docker run -d --restart=always --name cwlcron ",
                        {"Ref":"CwlUbuntuAgentDocker"}," cron\n",

                    "ESDN=es-master_$ECID\n",
                    "docker run --restart=always -p 9200:9200 -p 9300:9300 -d ",
                        "-v /mnt/xvdk:/usr/share/elasticsearch/data ",
                        "--cap-add=IPC_LOCK --ulimit memlock=-1:-1 ",
                        "-e ES_JAVA_OPTS=\"-Xms",{ "Fn::FindInMap": [ "InstanceVariables", { "Ref": "MasterNodeInstanceType" }, "ram" ] },"m -Xmx",{ "Fn::FindInMap": [ "InstanceVariables", { "Ref": "MasterNodeInstanceType" }, "ram" ] },"m\" ",
                        "--name $ESDN --log-opt awslogs-stream=$ESDN ",
                        {"Ref":"CwlLinuxParams"}," ",
                        {"Fn::If": ["IsVersionFive",
                            {"Fn::Join":["", [
                                {"Ref":"EsFiveContainerName"},
                                    " -E bootstrap.memory_lock=true",
                                    " -E network.publish_host=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)",
                                    " -E cluster.name=",{"Ref":"EsConfClusterName"},
                                    " -E cloud.aws.region=",{"Ref":"AWS::Region"},
                                    " -E discovery.ec2.groups=",{"Ref":"EsClusterNodeSg"},
                                    " -E node.attr.rack_id=master",
                                    " -E node.master=true",
                                    " -E node.data=false\n"
                            ]]},
                            {"Fn::Join":["", [
                                {"Ref":"EsTwoContainerName"},
                                    " --bootstrap.mlockall=true",
                                    " --index.number_of_replicas=1",
                                    " --index.number_of_shards=5",
                                    " --network.publish_host=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)",
                                    " --cluster.name=",{"Ref":"EsConfClusterName"},
                                    " --cloud.aws.region=",{"Ref":"AWS::Region"},
                                    " --discovery.ec2.groups=",{"Ref":"EsClusterNodeSg"},
                                    " --node.rack_id=master",
                                    " --node.master=true",
                                    " --node.data=false\n"
                            ]]}
                        ]}
                ]]}},
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/xvda",
                        "Ebs" : { "VolumeSize" : "30", "VolumeType" : "gp2" }
                    }
                ]
            }
        },
        "EsMasterNodeAsg" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "VPCZoneIdentifier": {"Ref":"ServerSubnets"},
                "LaunchConfigurationName" : { "Ref" : "EsMasterNodeLc" },
                "MinSize" : "3",
                "MaxSize" : "7",
                "Tags" : [{"Key": "Name", "Value" : "Elasticsearch Cluster Master Node", "PropagateAtLaunch" : "True"}]
            }
        },
        "EsGatewayNodeLc" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "InstanceType" : { "Ref" : "GatewayNodeInstanceType" },
                "ImageId" : { "Ref" : "BcUbuntuBaseAmiId" },
                "KeyName" : {"Fn::If": [
                    "HasNoKeypair",
                    { "Ref": "AWS::NoValue" },
                    { "Ref": "KeyPairName" }
                ]},
                "AssociatePublicIpAddress": "false",
                "SecurityGroups": [
                    { "Ref" : "EsClusterNodeSg" },
                    { "Ref" : "EsClusterGatewayNodeSg" }
                ],
                "IamInstanceProfile": { "Ref" : "EsDataNodeInstanceProfile" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",
                    "mkdir /home/xvdk\n",
                    "sysctl -w vm.max_map_count=262144\n",

                    "ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
                    "CWLA=cwlagent_$ECID\n",
                    "docker run -d --restart=always ",
                        "--name $CWLA --log-opt awslogs-stream=$CWLA ",
                        "-v /var/log:/var/log-host:ro ",
                        {"Ref":"CwlLinuxParams"}," ",
                        {"Ref":"CwlDockerParams"}," ",
                        {"Ref":"CwlUbuntuAgentDocker"},"\n",
                    "docker run -d --restart=always --name cwlcron ",
                        {"Ref":"CwlUbuntuAgentDocker"}," cron\n",

                    "ESDN=es-gateway_$ECID\n",
                    "docker run --restart=always -p 9200:9200 -p 9300:9300 -d ",
                        "-v /mnt/xvdk:/usr/share/elasticsearch/data ",
                        "--cap-add=IPC_LOCK --ulimit memlock=-1:-1 ",
                        "-e ES_JAVA_OPTS=\"-Xms",{ "Fn::FindInMap": [ "InstanceVariables", { "Ref": "MasterNodeInstanceType" }, "ram" ] },"m -Xmx",{ "Fn::FindInMap": [ "InstanceVariables", { "Ref": "MasterNodeInstanceType" }, "ram" ] },"m\" ",
                        "--name $ESDN --log-opt awslogs-stream=$ESDN ",
                        {"Ref":"CwlLinuxParams"}," ",
                        {"Fn::If": ["IsVersionFive",
                            {"Fn::Join":["", [
                                {"Ref":"EsFiveContainerName"},
                                    " -E bootstrap.memory_lock=true",
                                    " -E network.publish_host=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)",
                                    " -E cluster.name=",{"Ref":"EsConfClusterName"},
                                    " -E cloud.aws.region=",{"Ref":"AWS::Region"},
                                    " -E discovery.ec2.groups=",{"Ref":"EsClusterNodeSg"},
                                    " -E node.attr.rack_id=master",
                                    " -E node.master=false",
                                    " -E node.data=false\n"
                            ]]},
                            {"Fn::Join":["", [
                                {"Ref":"EsTwoContainerName"},
                                    " --bootstrap.mlockall=true",
                                    " --index.number_of_replicas=1",
                                    " --index.number_of_shards=5",
                                    " --network.publish_host=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)",
                                    " --cluster.name=",{"Ref":"EsConfClusterName"},
                                    " --cloud.aws.region=",{"Ref":"AWS::Region"},
                                    " --discovery.ec2.groups=",{"Ref":"EsClusterNodeSg"},
                                    " --node.rack_id=master",
                                    " --node.master=false",
                                    " --node.data=false\n"
                            ]]}
                        ]},
                        "KDN=kibana_$ECID\n",
                        "docker run -p 80:5601 -d --restart=always ",
                            "--name $KDN --log-opt awslogs-stream=$KDN ",
                            {"Ref":"CwlLinuxParams"}," ",
                            " -e ELASTICSEARCH_URL=http://", {"Fn::GetAtt":["ClusterGateway","DNSName"]}, ":9200 ",
                            {"Fn::If": ["IsVersionFive",
                                {"Ref":"KFiveContainerName"},
                                {"Ref":"KFourContainerName"}
                            ]}
                            
                ]]}},
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/xvda",
                        "Ebs" : { "VolumeSize" : "30", "VolumeType" : "gp2" }
                    }
                ]
            }
        },
        "EsGatewayNodeAsg" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "VPCZoneIdentifier": {"Ref":"ServerSubnets"},
                "LaunchConfigurationName" : { "Ref" : "EsGatewayNodeLc" },
                "MinSize" : "2",
                "MaxSize" : "10",
                "LoadBalancerNames" : [ { "Ref" : "ClusterGateway" } ],
                "Tags" : [{"Key": "Name", "Value" : "Elasticsearch Cluster Gateway Node", "PropagateAtLaunch" : "True"}]
            }
        },
        "ClusterGateway" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "Subnets": {"Ref":"ElbSubnets"},
                "Listeners" : [
                {
                    "LoadBalancerPort" : "9300",
                    "InstancePort" : "9300",
                    "Protocol" : "TCP"
                },
                {
                    "LoadBalancerPort" : "9200",
                    "InstancePort" : "9200",
                    "Protocol" : "HTTP"
                },
                {
                    "LoadBalancerPort" : "80",
                    "InstancePort" : "80",
                    "Protocol" : "HTTP"
                }],
                "HealthCheck" : {
                    "Target" : { "Fn::Join" : [ "", ["HTTP:9200/"]]},
                    "HealthyThreshold" : "3",
                    "UnhealthyThreshold" : "5",
                    "Interval" : "30",
                    "Timeout" : "5"
                },
                "SecurityGroups": [{ "Ref": "EsElbSg" }],
                "Scheme": "internal"
            }
        },
        "KibanaLc" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "InstanceType" : { "Ref" : "KibanaInstanceType" },
                "ImageId" : { "Ref" : "BcUbuntuBaseAmiId" },
                "KeyName" : {"Fn::If": [
                    "HasNoKeypair",
                    { "Ref": "AWS::NoValue" },
                    { "Ref": "KeyPairName" }
                ]},
                "AssociatePublicIpAddress": "false",
                "SecurityGroups": [
                    { "Ref" : "EsClusterNodeSg" },
                    { "Ref" : "EsClusterGatewayNodeSg" }
                ],
                "IamInstanceProfile": { "Ref" : "EsDataNodeInstanceProfile" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",
                    "ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
                    "CWLA=cwlagent_$ECID\n",
                    "docker run -d --restart=always ",
                        "--name $CWLA --log-opt awslogs-stream=$CWLA ",
                        "-v /var/log:/var/log-host:ro ",
                        {"Ref":"CwlLinuxParams"}," ",
                        {"Ref":"CwlDockerParams"}," ",
                        {"Ref":"CwlUbuntuAgentDocker"},"\n",
                    "docker run -d --restart=always --name cwlcron ",
                        {"Ref":"CwlUbuntuAgentDocker"}," cron\n",
                    "KDN=kibana_$ECID\n",
                    "docker run -p 80:5601 -d --restart=always ",
                        "--name $KDN --log-opt awslogs-stream=$KDN ",
                        {"Ref":"CwlLinuxParams"}," ",
                        " -e ELASTICSEARCH_URL=http://", {"Fn::GetAtt":["ClusterGateway","DNSName"]}, ":9200 ",
                        {"Fn::If": ["IsVersionFive",
                            {"Ref":"KFiveContainerName"},
                            {"Ref":"KFourContainerName"}
                        ]}
                            
                ]]}},
                "BlockDeviceMappings" : [
                    {
                        "DeviceName" : "/dev/xvda",
                        "Ebs" : { "VolumeSize" : "30", "VolumeType" : "gp2" }
                    }
                ]
            }
        },
        "KibanaAsg" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "VPCZoneIdentifier": {"Ref":"ServerSubnets"},
                "LaunchConfigurationName" : { "Ref" : "KibanaLc" },
                "MinSize" : "1",
                "MaxSize" : "10",
                "LoadBalancerNames" : [ { "Ref" : "KibanaGateway" } ],
                "Tags" : [{"Key": "Name", "Value" : "Kibana", "PropagateAtLaunch" : "True"}]
            }
        },
        "KibanaGateway" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "Subnets": {"Ref":"ElbSubnets"},
                "Listeners" : [{
                    "LoadBalancerPort" : "80",
                    "InstancePort" : "80",
                    "Protocol" : "HTTP"
                }],
                "HealthCheck" : {
                    "Target" : { "Fn::Join" : [ "", ["HTTP:80/"]]},
                    "HealthyThreshold" : "3",
                    "UnhealthyThreshold" : "5",
                    "Interval" : "30",
                    "Timeout" : "5"
                },
                "SecurityGroups": [{ "Ref": "EsElbSg" }],
                "Scheme": "internal"
            }
        },
        "EsDataNodeInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/analytics/elasticsearch/",
                "Roles": [{ "Ref": "EsDataNodeRole" }]
            }
        },
        "EsDataNodeRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [ "ec2.amazonaws.com" ]
                            },
                            "Action": [ "sts:AssumeRole" ]
                        }
                    ]
                },
                "Path": "/analytics/elasticsearch/",
                "Policies": [{
                    "PolicyName": "root",
                    "PolicyDocument": {
                        "Version" : "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": "EC2:Describe*",
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject",
                                "s3:PutObject",
                                "s3:DeleteObject"
                            ],
                            "Resource": [
                                { "Fn::Join" : ["", [
                                    "arn:aws:s3:::", {"Ref":"UtilityBucket"}, "/*"
                                ]]},
                                { "Fn::Join" : ["", [
                                    "arn:aws:s3:::", {"Ref":"UtilityBucket"}
                                ]]}
                            ]
                        }]
                    }
                }],
                "ManagedPolicyArns" : [
                    {"Ref":"CwlPolicy"}
                ]
            }
        },

        "EsClusterNodeSg" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Security group for elasticsearch cluster nodes to cluster.",
                "VpcId" : { "Ref" : "VpcId"},
                "Tags": [{"Key": "Name", "Value" : "Es Cluster Data Nodes"}]
            }
        },
        "EsClusterNodeSgSelfIngress" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" : {
                "IpProtocol" : "tcp",
                "ToPort" : "9300",
                "FromPort" : "9300",
                "GroupId" : { "Ref" : "EsClusterNodeSg" },
                "SourceSecurityGroupId" : { "Ref" : "EsClusterNodeSg" }
            }
        },

        "EsClusterGatewayNodeSg" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Load Balancer targets.",
                "SecurityGroupIngress" : [
                    { "IpProtocol": "6", "SourceSecurityGroupId" : { "Ref" : "EsElbSg" }, "FromPort" : "9200", "ToPort" : "9200" },
                    { "IpProtocol": "6", "SourceSecurityGroupId" : { "Ref" : "EsElbSg" }, "FromPort" : "80", "ToPort" : "80" }
                ],
                "VpcId" : { "Ref" : "VpcId"},
                "Tags": [{"Key": "Name", "Value" : "Es Cluster Gateway Nodes"}]
            }
        },
        "EsMasterElbKibanaIngress" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" : {
                "IpProtocol" : "tcp",
                "ToPort" : "9200",
                "FromPort" : "9200",
                "GroupId" : { "Ref" : "EsElbSg" },
                "SourceSecurityGroupId" : { "Ref" : "EsClusterGatewayNodeSg" }
            }
        },
        "EsElbSg" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Gateway to master nodes of the Elasticsearch Cluster",
                "SecurityGroupIngress" : [
                    { "IpProtocol" : "6" ,  "CidrIp": "0.0.0.0/0", "FromPort" : "9200", "ToPort" : "9200"  }
                ],
                "VpcId" : { "Ref" : "VpcId"},
                "Tags": [{"Key": "Name", "Value" : "Es Cluster Load Balancer"}]
            }
        },
        "EsElbToEsClusterGatewayNodeEgress" : {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties":{
                "IpProtocol": "tcp",
                "FromPort": "9200",
                "ToPort": "9200",
                "GroupId": { "Ref" : "EsElbSg" },
                "DestinationSecurityGroupId": { "Ref" : "EsClusterGatewayNodeSg" }
            }
        },
        "EsElbToEsClusterGatewayNodeKibanaEgress" : {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties":{
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "GroupId": { "Ref" : "EsElbSg" },
                "DestinationSecurityGroupId": { "Ref" : "EsClusterGatewayNodeSg" }
            }
        },

        "UtilityBucket" : {
            "Type" : "AWS::S3::Bucket",
            "Properties" : {
            },
            "DeletionPolicy" : "Retain"
        }
    },

    "Outputs" : {
        "EsElb" : {
            "Value" : { "Fn::GetAtt" : ["ClusterGateway", "DNSName"] },
            "Description" : "Private A record for ES Master Node ELB"
        }
    }
}
