AWSTemplateFormatVersion: 2010-09-09
Description: Multi AZ Elasticsearch on AutoScaling Group
Metadata:
  DefaultName: Elasticsearch
  Dependencies:
    - TemplatePath: networking/elb-subnets
      Parameters:
        VpcId: VpcId
      Outputs:
        ElbSubnets: ElbSubnets
        ServerSubnets: WebServerSubnets
    - TemplatePath: analytics/logs-store
      Resources:
        CwlPolicy: LinuxLogPolicy
      Outputs:
        CwlLinuxParams: LxDockerLogParams
        CwlDockerParams: DockerCwlParams
Parameters:
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: String
    Default: ''
  CertificateArn:
    Description: 'ARN of the imported SSL certificate'
    Type: String
    Default: ''
  HostedZoneName:
    Description: >-
      Hosted Zone for the url (Without '.' at the end). You need to fill in
      Subdomain as well for custom domain to work.
    Type: String
    Default: ''
  EsSubdomain:
    Description: >-
      Subdomain (Without '.'  at the end). You need to fill in HostedZoneName as
      well for custom domain to work.
    Type: String
    Default: ''
  KibanaSubdomain:
    Description: >-
      Subdomain (Without '.'  at the end). You need to fill in HostedZoneName as
      well for custom domain to work.
    Type: String
    Default: ''
  KibanaInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  GatewayNodeInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: m3.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - m3.medium
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  DataNodeInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: m3.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - m3.medium
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  MasterNodeInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - m3.medium
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  BcUbuntuBaseAmiId:
    Description: Custom AMI Baked by BitClouded Software
    Type: 'AWS::EC2::Image::Id'
  EsDataDiskSize:
    Description: Size of the SSD for the elasticsearch to write to.
    Default: '150'
    Type: Number
    MinValue: '50'
    MaxValue: '1000'
  EsConfShard:
    Description: Number of shards per index.
    Default: '5'
    Type: Number
  EsConfReplica:
    Description: Number of replicas.
    Default: '1'
    Type: Number
  EsConfClusterName:
    Description: Name of cluster. This is used for discovery.
    Type: String
    Default: EsCluster
  VpcId:
    Description: 'VPCid associated with the subnets'
    Type: 'AWS::EC2::VPC::Id'
  ElbSubnets:
    Description: 'VPCid associated with the subnets'
    Type: 'List<AWS::EC2::Subnet::Id>'
  ServerSubnets:
    Description: 'VPCid associated with the subnets'
    Type: 'List<AWS::EC2::Subnet::Id>'
  EsContainerName:
    Description: Name of container to run elasticsearch.
    Type: String
    Default: 'bitclouded/elasticsearch:2-1'
  KibanaContainerName:
    Description: Name of container to run elasticsearch.
    Type: String
    Default: 'docker.elastic.co/kibana/kibana:6.1.1'
  CwlUbuntuAgentDocker:
    Description: Name of cluster. This is used for discovery.
    Type: String
    Default: 'bitclouded/aws-cwl-agent:4.1'
  CwlLinuxParams:
    Description: >-
      Environment variables for syslog and authlog cwl group names
    Type: String
  CwlDockerParams:
    Description: 'Docker log driver params'
    Type: String
  CwlPolicy:
    Description: 'Managed policy for linux logging'
    Type: String

Conditions:
  HasNoKeypair: !Equals [!Ref KeyPairName, '']
  HasSsl: !Not [!Equals [!Ref CertificateArn, '']]
  HasEsHostname: !And 
    - !Not [!Equals [!Ref EsSubdomain, '']]
    - !Not [!Equals [!Ref HostedZoneName, '']]
  HasKibanaHostname: !And 
    - !Not [!Equals [!Ref KibanaSubdomain, '']]
    - !Not [!Equals [!Ref HostedZoneName, '']]
  AttachEphemeral:
    !Equals [!Select [0, !Split ['.', !Ref DataNodeInstanceType]], 'i3']

Resources:

  # Optional Domains
  EsDomain:
    Type: 'AWS::Route53::RecordSet'
    Condition: HasEsHostname
    Properties:
      HostedZoneName: !Sub '${HostedZoneName}.'
      Comment: Hostname
      Name: !Sub '${EsSubdomain}.${HostedZoneName}.'
      Type: A
      AliasTarget:
        DNSName: !GetAtt ClusterGateway.DNSName
        HostedZoneId: !GetAtt ClusterGateway.CanonicalHostedZoneNameID
  KibanaDomain:
    Type: 'AWS::Route53::RecordSet'
    Condition: HasKibanaHostname
    Properties:
      HostedZoneName: !Sub '${HostedZoneName}.'
      Comment: Hostname
      Name: !Sub '${KibanaSubdomain}.${HostedZoneName}.'
      Type: A
      AliasTarget:
        DNSName: !GetAtt KibanaGateway.DNSName
        HostedZoneId: !GetAtt KibanaGateway.CanonicalHostedZoneNameID
  # /Optional Domains

  EsDataNodeLc:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      InstanceType: !Ref DataNodeInstanceType
      ImageId: !Ref BcUbuntuBaseAmiId
      KeyName: !If 
        - HasNoKeypair
        - !Ref 'AWS::NoValue'
        - !Ref KeyPairName
      SecurityGroups: 
        - !Ref EsClusterNodeSg
      IamInstanceProfile: !Ref EsDataNodeInstanceProfile
      UserData: !Base64 
        Fn::Sub:
          - |
            #!/bin/bash
            umount /mnt/
            mkfs -t ext4 /dev/${DataDisk}
            mkdir /mnt/xvdk
            cp /etc/fstab /etc/fstab.bak && rm /etc/fstab
            cat /etc/fstab.bak | grep -v ^/dev/${DataDisk} | tee /etc/fstab
            echo -e "/dev/${DataDisk}\t/mnt/xvdk\tauto\tdefaults\t0\t2" >> /etc/fstab
            mount -a
            chown 1000:1000 /mnt/xvdk -R
            sysctl -w vm.max_map_count=262144

            ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
            HEAP_SIZE=$(($(grep MemTotal /proc/meminfo | awk '{print $2}') / 2000))
            docker run --restart=always -p 9200:9200 -p 9300:9300 -d \
              -v /mnt/xvdk:/usr/share/elasticsearch/data \
              -e ES_JAVA_OPTS="-Xms${!HEAP_SIZE}m -Xmx${!HEAP_SIZE}m" \
              --cap-add=IPC_LOCK --ulimit memlock=-1:-1 \
              --name es-data --log-opt awslogs-stream=${AWS::StackName}/es-data/$ECID \
              ${CwlLinuxParams} \
              -e HOST_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\
              -e INSTANCE_ID=$ECID \
              -e CLUSTER_NAME=${EsConfClusterName} \
              -e DISC_SECGROUP=${EsClusterNodeSg} \
              -e IS_MASTER=false -e IS_DATA=true \
              -e AWS_REGION=${AWS::Region} \
              ${EsContainerName}
          - DataDisk: !If ["AttachEphemeral", "nvme0n1", "xvdk"]

      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: '30'
            VolumeType: gp2
        - !If
          - "AttachEphemeral"
          - !Ref "AWS::NoValue"
          - DeviceName: /dev/xvdk
            Ebs: 
              VolumeSize: !Ref EsDataDiskSize
              VolumeType: gp2

  EsDataNodeGroupOneAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Select 
          - '0'
          - !Ref ServerSubnets
      LaunchConfigurationName: !Ref EsDataNodeLc
      MinSize: '1'
      MaxSize: '10'
      Tags:
        - Key: Name
          Value: Elasticsearch Cluster Data Node Grp One
          PropagateAtLaunch: 'True'
  EsDataNodeGroupTwoAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Select 
          - '1'
          - !Ref ServerSubnets
      LaunchConfigurationName: !Ref EsDataNodeLc
      MinSize: '1'
      MaxSize: '10'
      Tags:
        - Key: Name
          Value: Elasticsearch Cluster Data Node Grp Two
          PropagateAtLaunch: 'True'

  EsMasterNodeLc:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      InstanceType: !Ref MasterNodeInstanceType
      ImageId: !Ref BcUbuntuBaseAmiId
      KeyName: !If 
        - HasNoKeypair
        - !Ref 'AWS::NoValue'
        - !Ref KeyPairName
      SecurityGroups:
        - !Ref EsClusterNodeSg
      IamInstanceProfile: !Ref EsDataNodeInstanceProfile
      UserData: !Base64 
        Fn::Sub: |
          #!/bin/bash
          sysctl -w vm.max_map_count=262144
          ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
          HEAP_SIZE=$(($(grep MemTotal /proc/meminfo | awk '{print $2}') / 2000))
          docker run --restart=always -p 9200:9200 -p 9300:9300 -d \
            -e ES_JAVA_OPTS="-Xms${!HEAP_SIZE}m -Xmx${!HEAP_SIZE}m" \
            --cap-add=IPC_LOCK --ulimit memlock=-1:-1 \
            --name es-master --log-opt awslogs-stream=${AWS::StackName}/es-master/$ECID \
            ${CwlLinuxParams} \
            -e HOST_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\
            -e INSTANCE_ID=$ECID \
            -e CLUSTER_NAME=${EsConfClusterName} \
            -e DISC_SECGROUP=${EsClusterNodeSg} \
            -e IS_MASTER=true -e IS_DATA=false \
            -e AWS_REGION=${AWS::Region} \
            ${EsContainerName}

      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
  EsMasterNodeAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref ServerSubnets
      LaunchConfigurationName: !Ref EsMasterNodeLc
      MinSize: '3'
      MaxSize: '7'
      Tags:
        - Key: Name
          Value: Elasticsearch Cluster Master Node
          PropagateAtLaunch: 'True'
  EsGatewayNodeLc:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      InstanceType: !Ref GatewayNodeInstanceType
      ImageId: !Ref BcUbuntuBaseAmiId
      KeyName: !If 
        - HasNoKeypair
        - !Ref 'AWS::NoValue'
        - !Ref KeyPairName
      SecurityGroups:
        - !Ref EsClusterNodeSg
        - !Ref EsClusterGatewayNodeSg
      IamInstanceProfile: !Ref EsDataNodeInstanceProfile
      UserData: !Base64 
        Fn::Sub: |
          #!/bin/bash
          sysctl -w vm.max_map_count=262144
          ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
          HEAP_SIZE=$(($(grep MemTotal /proc/meminfo | awk '{print $2}') / 2000))
          docker run --restart=always -p 9200:9200 -p 9300:9300 -d \
            -e ES_JAVA_OPTS="-Xms${!HEAP_SIZE}m -Xmx${!HEAP_SIZE}m" \
            --cap-add=IPC_LOCK --ulimit memlock=-1:-1 \
            --name es-master --log-opt awslogs-stream=${AWS::StackName}/es-gateway/$ECID \
            ${CwlLinuxParams} \
            -e HOST_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\
            -e CLUSTER_NAME=${EsConfClusterName} \
            -e INSTANCE_ID=$ECID \
            -e DISC_SECGROUP=${EsClusterNodeSg} \
            -e IS_MASTER=false -e IS_DATA=false \
            -e AWS_REGION=${AWS::Region} \
            ${EsContainerName}
          
          #docker run -d -p 9000:9000 dylanmei/cerebro bin/cerebro -Dhosts.0.host=http://internal-Test-Elas-ClusterG-W8Y38SYKBYRP-1423967256.ap-southeast-2.elb.amazonaws.com:9200

      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
  EsGatewayNodeAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref ServerSubnets
      LaunchConfigurationName: !Ref EsGatewayNodeLc
      MinSize: '2'
      MaxSize: '10'
      LoadBalancerNames:
        - !Ref ClusterGateway
      Tags:
        - Key: Name
          Value: Elasticsearch Cluster Gateway Node
          PropagateAtLaunch: 'True'
  ClusterGateway:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Subnets: !Ref ElbSubnets
      Listeners:
        - LoadBalancerPort: '9300'
          InstancePort: '9300'
          Protocol: TCP
        - LoadBalancerPort: '9200'
          InstancePort: '9200'
          Protocol: HTTP
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: 'HTTP:9200/'
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      SecurityGroups:
        - !Ref EsElbSg
      Scheme: internal
  KibanaLc:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      InstanceType: !Ref KibanaInstanceType
      ImageId: !Ref BcUbuntuBaseAmiId
      KeyName: !If 
        - HasNoKeypair
        - !Ref 'AWS::NoValue'
        - !Ref KeyPairName
      SecurityGroups:
        - !Ref EsClusterNodeSg
        - !Ref EsClusterGatewayNodeSg
      IamInstanceProfile: !Ref EsDataNodeInstanceProfile
      UserData: !Base64 
        'Fn::Sub': |
          #!/bin/bash
          ECID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
          docker run -p 80:5601 -d --restart=always \
            --name kibana --log-opt awslogs-stream=${AWS::StackName}/kibana/$ECID \
            ${CwlLinuxParams} \
            -e ELASTICSEARCH_URL=http://${ClusterGateway.DNSName}:9200 \
            ${KibanaContainerName}
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: '30'
            VolumeType: gp2
  KibanaAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !Ref ServerSubnets
      LaunchConfigurationName: !Ref KibanaLc
      MinSize: '1'
      MaxSize: '10'
      LoadBalancerNames:
        - !Ref KibanaGateway
      Tags:
        - Key: Name
          Value: Kibana
          PropagateAtLaunch: 'True'
  KibanaGateway:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Subnets: !Ref ElbSubnets
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      HealthCheck:
        Target: 'HTTP:80/'
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      SecurityGroups:
        - !Ref EsElbSg
      Scheme: internal
  EsDataNodeInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /datastore/elasticsearch/
      Roles:
        - !Ref EsDataNodeRole
  EsDataNodeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /datastore/elasticsearch/
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'EC2:Describe*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${UtilityBucket}/*'
                  - !Sub 'arn:aws:s3:::${UtilityBucket}'
      ManagedPolicyArns:
        - !Ref CwlPolicy
  EsClusterNodeSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for elasticsearch cluster nodes to cluster.
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: Es Cluster Data Nodes
  EsClusterNodeSgSelfIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      ToPort: '9300'
      FromPort: '9300'
      GroupId: !Ref EsClusterNodeSg
      SourceSecurityGroupId: !Ref EsClusterNodeSg
  EsClusterGatewayNodeSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Load Balancer targets.
      SecurityGroupIngress:
        - IpProtocol: '6'
          SourceSecurityGroupId: !Ref EsElbSg
          FromPort: '9200'
          ToPort: '9200'
        - IpProtocol: '6'
          SourceSecurityGroupId: !Ref EsElbSg
          FromPort: '80'
          ToPort: '80'
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: Es Cluster Gateway Nodes
  EsMasterElbKibanaIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      ToPort: '9200'
      FromPort: '9200'
      GroupId: !Ref EsElbSg
      SourceSecurityGroupId: !Ref EsClusterGatewayNodeSg
  EsElbSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Gateway to master nodes of the Elasticsearch Cluster
      SecurityGroupIngress:
        - IpProtocol: '6'
          CidrIp: 0.0.0.0/0
          FromPort: '9200'
          ToPort: '9200'
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: Es Cluster Load Balancer
  EsElbToEsClusterGatewayNodeEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      IpProtocol: tcp
      FromPort: '9200'
      ToPort: '9200'
      GroupId: !Ref EsElbSg
      DestinationSecurityGroupId: !Ref EsClusterGatewayNodeSg
  EsElbToEsClusterGatewayNodeKibanaEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      GroupId: !Ref EsElbSg
      DestinationSecurityGroupId: !Ref EsClusterGatewayNodeSg
  UtilityBucket:
    Type: 'AWS::S3::Bucket'
    Properties: {}
    DeletionPolicy: Retain
Outputs:
  EsElb:
    Value: !GetAtt ClusterGateway.DNSName
    Description: LoadBalancer Url of the ES Gateway
  KibanaUrl:
    Value: !If 
      - HasKibanaHostname
      - !Sub 'http://${KibanaSubdomain}.${HostedZoneName}/'
      - !Sub 'http://${KibanaGateway.DNSName}/'
    Description: Kibana URL
