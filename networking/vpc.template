AWSTemplateFormatVersion: 2010-09-09
Description: A simple empty VPC.
Metadata:
  DefaultName: Vpc
  Dependencies:
    - TemplatePath: analytics/logs-store
      Resources:
        FlowLogGroup: VpcTrafficLog
      Outputs:
        FlowLogRole: FlowLogRoleArn
Parameters:
  VpcPrefix:
    Description: Prefix for the VPC
    Type: String
    Default: '10.0'
  VpcName:
    Description: Display name for the VPC
    Type: String
    Default: Lego
  FlowLogRole:
    Description: >-
      Subnet suffix to be concatenated with the VPC prefix.
      [logs-store.outputs.FlowLogRoleArn]
    Type: String
  FlowLogGroup:
    Description: >-
      Subnet suffix to be concatenated with the VPC prefix.
      [logs-store.resources.VpcTrafficLog]
    Type: String
Mappings:
  RegionMap:
    us-east-1:
      AzCount: '3'
    us-east-2:
      AzCount: '3'
    us-west-1:
      AzCount: '2'
    us-west-2:
      AzCount: '3'
    eu-west-1:
      AzCount: '3'
    eu-central-1:
      AzCount: '2'
    sa-east-1:
      AzCount: '3'
    ap-southeast-1:
      AzCount: '2'
    ap-southeast-2:
      AzCount: '3'
    ap-northeast-1:
      AzCount: '2'
    ap-northeast-2:
      AzCount: '2'
Resources:
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Join 
        - ''
        - - !Ref VpcPrefix
          - .0.0/16
      Tags:
        - Key: Name
          Value: !Ref VpcName
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
  FlowLog:
    Type: 'AWS::EC2::FlowLog'
    Properties:
      DeliverLogsPermissionArn: !Ref FlowLogRole
      LogGroupName: !Ref FlowLogGroup
      ResourceId: !Ref Vpc
      ResourceType: VPC
      TrafficType: ALL
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref VpcName
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  HttpNsSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Metadata:
      Comment: !Join 
        - ' '
        - - A security group to allow inbound http(s) traffic.
    Properties:
      GroupDescription: A generic security group for targets that serve http(s) traffic.
      SecurityGroupIngress:
        - IpProtocol: '6'
          CidrIp: 0.0.0.0/0
          FromPort: '80'
          ToPort: '80'
        - IpProtocol: '6'
          CidrIp: 0.0.0.0/0
          FromPort: '443'
          ToPort: '443'
      Tags:
        - Key: Name
          Value: Http(s)
      VpcId: !Ref Vpc
  ElbSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Metadata:
      Comment: !Join 
        - ' '
        - - >-
            ELBs are managed by AWS, therefore there shouldn't be any trust
            issue allowing
          - >-
            ELBs from different stacks to 'cross talk' to web servers from
            another
          - application stack.
    Properties:
      GroupDescription: A generic security group for the elbs.
      SecurityGroupEgress:
        - IpProtocol: '-1'
          DestinationSecurityGroupId: !Ref ElbTargetSecGroup
      SecurityGroupIngress: []
      Tags:
        - Key: Name
          Value: Elb-Web(Elb)
      VpcId: !Ref Vpc
  ElbTargetSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Metadata:
      Comment: !Join 
        - ' '
        - - >-
            ELBs are managed by AWS, therefore there shouldn't be any trust
            issue allowing
          - >-
            ELBs from different stacks to 'cross talk' to web servers from
            another
          - application stack.
    Properties:
      GroupDescription: A generic security group for the elb targets.
      SecurityGroupIngress: []
      Tags:
        - Key: Name
          Value: Elb-Web(Web)
      VpcId: !Ref Vpc
  ElbWebServerSecGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref ElbTargetSecGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ElbSecGroup
Outputs:
  AzCount:
    Value: !FindInMap 
      - RegionMap
      - !Ref 'AWS::Region'
      - AzCount
