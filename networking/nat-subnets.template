AWSTemplateFormatVersion: 2010-09-09
Description: >-
  General purpose subnets twith a route table having the public route mapped
  through a NAT.
Metadata:
  DefaultName: NatSubnets
  Dependencies:
    - TemplatePath: networking/vpc
      Resources:
        VpcId: Vpc
      Parameters:
        VpcPrefix: VpcPrefix
      Outputs:
        AzCount: AzCount
    - TemplatePath: networking/nat-gateway-subnets
      Resources:
        NatServerSubnet1: Subnet1
        NatServerSubnet2: Subnet2
        NatServerSubnet3: Subnet3
      NestedDependency: networking/vpc.template
Parameters:
  NatServerSubnet1:
    Description: >-
      Subnet suffix to be concatenated with the VPC prefix.
      [nat-gateway-subnets.resources.Subnet1]
    Type: String
  NatServerSubnet2:
    Description: >-
      Subnet suffix to be concatenated with the VPC prefix.
      [nat-gateway-subnets.resources.Subnet2]
    Type: String
  NatServerSubnet3:
    Description: >-
      Subnet suffix to be concatenated with the VPC prefix.
      [nat-gateway-subnets.resources.Subnet3]
    Type: String
    Default: ''
  Subnet1Suffix:
    Description: 'Subnet suffix to be concatenated with the VPC prefix. '
    Type: Number
    Default: '76'
  Subnet2Suffix:
    Description: 'Subnet suffix to be concatenated with the VPC prefix. '
    Type: Number
    Default: '77'
  Subnet3Suffix:
    Description: 'Subnet suffix to be concatenated with the VPC prefix. '
    Type: Number
    Default: '78'
  VpcPrefix:
    Description: 'Prefix for the VPC [vpc.parameters.VpcPrefix]'
    Type: String
  VpcId:
    Description: 'VPC id [vpc.resources.Vpc]'
    Type: String
  AzCount:
    Description: >-
      Number of AZ. Third subnet will only be created if number is 3
      [vpc.outputs.AzCount]
    Type: String
  AvailableAzs:
    Description: Comma-delimited list of three IP blocks
    Type: CommaDelimitedList
    Default: ''
  IsMultiAz:
    Description: Enables multi AZ deployment of NAT Gateway. The default is true.
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
Conditions:
  IsThreeAz: !Equals 
    - !Ref AzCount
    - '3'
  IsMultiAzActive: !Equals 
    - !Ref IsMultiAz
    - 'true'
  IsThreeMultiAz: !And
    - !Condition IsThreeAz
    - !Condition IsMultiAzActive
  IsAzSupplied: !Not 
    - !Equals 
      - !Select 
        - '0'
        - !Ref AvailableAzs
      - ''
Resources:

  # Primary Subnet. This is the subnet that holds the
  # NAT gateway when non-multi az deployment is chosen.
  Subnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: !Sub '${VpcPrefix}.${Subnet1Suffix}.0/24' 
      AvailabilityZone: !Select 
        - '0'
        - !If 
          - IsAzSupplied
          - !Ref AvailableAzs
          - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private
  Nat1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt Eip1.AllocationId
      SubnetId: !Ref NatServerSubnet1
  Eip1:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  RouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcId
      Tags: []
  PublicRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Nat1
  RouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable1
  AclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet1
      NetworkAclId: !Ref Acl

  # Second subnet would use the first subnet's NAT gateway if
  # non-multiaz configuration is chosen.
  Subnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: !Sub '${VpcPrefix}.${Subnet2Suffix}.0/24' 
      AvailabilityZone: !Select 
        - '1'
        - !If 
          - IsAzSupplied
          - !Ref AvailableAzs
          - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private
  Nat2:
    Type: 'AWS::EC2::NatGateway'
    Condition: IsMultiAzActive
    Properties:
      AllocationId: !GetAtt Eip2.AllocationId
      SubnetId: !Ref NatServerSubnet2
  Eip2:
    Type: 'AWS::EC2::EIP'
    Condition: IsMultiAzActive
    Properties:
      Domain: vpc
  RouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VpcId
      Tags: []
  PublicRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If ["IsMultiAzActive", !Ref Nat2, !Ref Nat1]
  RouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable2
  AclAssociation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet2
      NetworkAclId: !Ref Acl

  # Third subnet is optional for zones where there's only 2 subnets.
  # It uses a combinational condition that depends on both whether
  # there's 2 or 3 subnets and whether multiaz configuration is selected
  Subnet3:
    Type: 'AWS::EC2::Subnet'
    Condition: IsThreeAz
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: !Sub '${VpcPrefix}.${Subnet3Suffix}.0/24' 
      AvailabilityZone: !Select 
        - '2'
        - !If 
          - IsAzSupplied
          - !Ref AvailableAzs
          - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private
  Nat3:
    Type: 'AWS::EC2::NatGateway'
    Condition: IsThreeMultiAz
    Properties:
      AllocationId: !GetAtt Eip3.AllocationId
      SubnetId: !Ref NatServerSubnet3
  Eip3:
    Type: 'AWS::EC2::EIP'
    Condition: IsThreeMultiAz
    Properties:
      Domain: vpc
  RouteTable3:
    Type: 'AWS::EC2::RouteTable'
    Condition: IsThreeAz
    Properties:
      VpcId: !Ref VpcId
      Tags: []
  PublicRoute3:
    Type: 'AWS::EC2::Route'
    Condition: IsThreeAz
    Properties:
      RouteTableId: !Ref RouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If ["IsThreeMultiAz", !Ref Nat3, !Ref Nat1]
  RouteTableAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: IsThreeAz
    Properties:
      SubnetId: !Ref Subnet3
      RouteTableId: !Ref RouteTable3
  AclAssociation3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Condition: IsThreeAz
    Properties:
      SubnetId: !Ref Subnet3
      NetworkAclId: !Ref Acl

  # The ACL is shared across all two or three subnets.
  Acl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VpcId
      Tags: []
  AclEntryInVpcRequests:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref Acl
      RuleNumber: '1000'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Join 
        - ''
        - - !Ref VpcPrefix
          - .0.0/16
      PortRange:
        From: '0'
        To: '32768'
  AclEntryInPublicDataPort:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref Acl
      RuleNumber: '1001'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '32768'
        To: '65535'
  AclEntryOutPublicRequests:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref Acl
      RuleNumber: '1000'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '32768'
  AclEntryOutVpcDataPort:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref Acl
      RuleNumber: '1001'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !Join 
        - ''
        - - !Ref VpcPrefix
          - .0.0/16
      PortRange:
        From: '32768'
        To: '65535'
  
  # S3 endpoint for effeciency.
  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      RouteTableIds:
        - !Ref RouteTable1
        - !Ref RouteTable2
        - !If 
          - IsThreeAz
          - !Ref RouteTable3
          - !Ref 'AWS::NoValue'
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .s3
      VpcId: !Ref VpcId

Outputs:
  # This comma delimited string helps piece together
  # a list of subnets. Used for ASG in depending templates
  # where they just need to spared to maximum number of
  # availability zones.
  Subnets:
    Description: The list of subnets for the ELBs
    Value: !Join 
      - ''
      - - !Ref Subnet1
        - ','
        - !Ref Subnet2
        - !If 
          - IsThreeAz
          - !Join 
            - ''
            - - ','
              - !Ref Subnet3
          - !Ref 'AWS::NoValue'
