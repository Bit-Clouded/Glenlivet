{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "Subnets that has outbound internet access and accepts no inbound connections. This is mainly used for servers that need direct access to the WAN; NAT, proxy. Other use cases include services that require massive bandwidth and are potentially hindered by NAT or Proxy. For instance EMR and RedShift when used in combination with taking in data from S3.",

    "Metadata" : {
        "DefaultName" : "PublicOutboundSubnets"
    },

    "Parameters" : {

        "Subnet1Suffix" : {
            "Description" : "Subnet suffix to be concatenated with the VPC prefix. ",
            "Type" : "Number",
            "Default" : "64"
        },

        "Subnet2Suffix" : {
            "Description" : "Subnet suffix to be concatenated with the VPC prefix. ",
            "Type" : "Number",
            "Default" : "65"
        },

        "Subnet3Suffix" : {
            "Description" : "Subnet suffix to be concatenated with the VPC prefix. ",
            "Type" : "Number",
            "Default" : "66"
        },

        "VpcPrefix" : {
            "Description" : "Prefix for the VPC [vpc.parameters.VpcPrefix]",
            "Type" : "String"
        },

        "VpcId" : {
            "Description" : "VPC id [vpc.resources.Vpc]",
            "Type" : "String"
        },

        "InternetGateway" : {
            "Description" : "Id of internet gateway. [vpc.resources.InternetGateway]",
            "Type" : "String"
        },

        "AzCount" : {
            "Description" : "Number of AZ. Third subnet will only be created if number is 3 [vpc.outputs.AzCount]",
            "Type" : "String"
        },

        "AvailableAzs" : {
            "Description" : "Comma-delimited list of three IP blocks",
            "Type" : "CommaDelimitedList",
            "Default" : ""
        }

    },

    "Conditions" : {
        "IsThreeAz" : { "Fn::Equals" : [{"Ref" : "AzCount"}, "3"]},
        "IsAzSupplied" : { "Fn::Not" : [{ "Fn::Equals" : [
            {"Fn::Select": ["0", {"Ref" : "AvailableAzs"}]}, ""
        ]}]}
    },

    "Resources" : {

        "Subnet1" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "VpcId" },
                "CidrBlock" : { "Fn::Join" : [ "", [
                    { "Ref" : "VpcPrefix" }, ".", { "Ref" : "Subnet1Suffix" }, ".0/24"
                ]]},
                "AvailabilityZone": { "Fn::Select": [
                    "0", {"Fn::If" : [ "IsAzSupplied", {"Ref" : "AvailableAzs"}, { "Fn::GetAZs": "" } ]}
                ]},
                "Tags" : [],
                "MapPublicIpOnLaunch" : "True"
            }
        },
        "RouteTableAssociation1" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "Subnet1" },
                "RouteTableId" : { "Ref" : "RouteTable" }
            }
        },
        "AclAssociation1" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "Subnet1" },
                "NetworkAclId" : { "Ref" : "Acl" }
            }
        },

        "Subnet2" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "VpcId" },
                "CidrBlock" : { "Fn::Join" : [ "", [
                    { "Ref" : "VpcPrefix" }, ".", { "Ref" : "Subnet2Suffix" }, ".0/24"
                ]]},
                "AvailabilityZone": { "Fn::Select": [
                    "1", {"Fn::If" : [ "IsAzSupplied", {"Ref" : "AvailableAzs"}, { "Fn::GetAZs": "" } ]}
                ]},
                "Tags" : [],
                "MapPublicIpOnLaunch" : "True"
            }
        },
        "RouteTableAssociation2" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "Subnet2" },
                "RouteTableId" : { "Ref" : "RouteTable" }
            }
        },
        "AclAssociation2" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "Subnet2" },
                "NetworkAclId" : { "Ref" : "Acl" }
            }
        },

        "Subnet3" : {
            "Type" : "AWS::EC2::Subnet",
            "Condition" : "IsThreeAz",
            "Properties" : {
                "VpcId" : { "Ref" : "VpcId" },
                "CidrBlock" : { "Fn::Join" : [ "", [
                    { "Ref" : "VpcPrefix" }, ".", { "Ref" : "Subnet3Suffix" }, ".0/24"
                ]]},
                "AvailabilityZone": { "Fn::Select": [
                    "2", {"Fn::If" : [ "IsAzSupplied", {"Ref" : "AvailableAzs"}, { "Fn::GetAZs": "" } ]}
                ]},
                "Tags" : [],
                "MapPublicIpOnLaunch" : "True"
            }
        },
        "RouteTableAssociation3" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Condition" : "IsThreeAz",
            "Properties" : {
                "SubnetId" : { "Ref" : "Subnet3" },
                "RouteTableId" : { "Ref" : "RouteTable" }
            }
        },
        "AclAssociation3" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Condition" : "IsThreeAz",
            "Properties" : {
                "SubnetId" : { "Ref" : "Subnet3" },
                "NetworkAclId" : { "Ref" : "Acl" }
            }
        },

        "RouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {"Ref": "VpcId"},
                "Tags" : []
            }
        },
        "PublicRoute" : {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : { "Ref" : "RouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },

        "Acl" : {
            "Type" : "AWS::EC2::NetworkAcl",
            "Properties" : {
                "VpcId" : {"Ref": "VpcId"},
                "Tags" : []
            }
        },

        "AclEntryInVpcRequests" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "Acl" },
                "RuleNumber" : "1000",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : { "Fn::Join" : [ "", [
                    { "Ref" : "VpcPrefix" }, ".0.0/16"
                ]]},
                "PortRange" : { "From" : "0", "To" : "32768" }
            }
        },
        "AclEntryInPublicDataPort" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "Acl" },
                "RuleNumber" : "1001",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "32768", "To" : "65535" }
            }
        },
        "AclEntryOutPublicRequests" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "Acl" },
                "RuleNumber" : "1000",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "true",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "0", "To" : "32768" }
            }
        },
        "AclEntryOutVpcDataPort" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "Acl" },
                "RuleNumber" : "1001",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "true",
                "CidrBlock" : { "Fn::Join" : [ "", [
                    { "Ref" : "VpcPrefix" }, ".0.0/16"
                ]]},
                "PortRange" : { "From" : "32768", "To" : "65535" }
            }
        },
        
        "RedShiftClusteredSubnetGroup" : {
            "Type": "AWS::Redshift::ClusterSubnetGroup",
            "Properties": {
                "Description": "Redshift Cluster Subnet Group for Internet Accessable Subnets",
                "SubnetIds": [
                    {"Ref": "Subnet1"},
                    {"Ref": "Subnet2"},
                    {"Fn::If":["IsThreeAz",{"Ref": "Subnet3"},{"Ref" : "AWS::NoValue"}]}
                ]
            }
        }
    },

    "Outputs" : {
        "Subnets" : {
            "Description" : "The list of subnets for the ELBs",
            "Value" : { "Fn::Join" : ["", [
                {"Ref":"Subnet1"}, ",", {"Ref":"Subnet2"},
                { "Fn::If" : ["IsThreeAz",
                    { "Fn::Join" : ["", [",", {"Ref":"Subnet3"}]] },
                    { "Ref" : "AWS::NoValue" }
                ]}
            ]]}
        }
    }
}
